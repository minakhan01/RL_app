[{"C:\\code\\mit\\RL_app\\src\\screens\\CalendarScreen\\index.jsx":"1","C:\\code\\mit\\RL_app\\src\\redux\\actions\\break.action.js":"2","C:\\code\\mit\\RL_app\\src\\index.js":"3","C:\\code\\mit\\RL_app\\src\\screens\\PopupScreen\\index.jsx":"4","C:\\code\\mit\\RL_app\\src\\redux\\types\\break.types.js":"5","C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\index.jsx":"6","C:\\code\\mit\\RL_app\\src\\redux\\actions\\test.action.js":"7","C:\\code\\mit\\RL_app\\src\\redux\\actions\\onboarding.action.js":"8","C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\FinishingUp.jsx":"9","C:\\code\\mit\\RL_app\\src\\reportWebVitals.js":"10","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\onboarding.reducer.js":"11","C:\\code\\mit\\RL_app\\src\\components\\Toolbar.js":"12","C:\\code\\mit\\RL_app\\src\\App.js":"13","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\test.reducer.js":"14","C:\\code\\mit\\RL_app\\src\\components\\Timer.js":"15","C:\\code\\mit\\RL_app\\src\\screens\\BreakScreen\\index.jsx":"16","C:\\code\\mit\\RL_app\\src\\redux\\types\\past.types.js":"17","C:\\code\\mit\\RL_app\\src\\screens\\HomeScreen\\index.jsx":"18","C:\\code\\mit\\RL_app\\src\\redux\\types\\onboarding.types.js":"19","C:\\code\\mit\\RL_app\\src\\services\\awclient.service.js":"20","C:\\code\\mit\\RL_app\\src\\redux\\sagas\\index.js":"21","C:\\code\\mit\\RL_app\\src\\services\\index.js":"22","C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\PersonalInformation.jsx":"23","C:\\code\\mit\\RL_app\\src\\breakmanager\\index.js":"24","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\index.js":"25","C:\\code\\mit\\RL_app\\src\\redux\\store.js":"26","C:\\code\\mit\\RL_app\\src\\redux\\configureStore.js":"27","C:\\code\\mit\\RL_app\\src\\components\\Loading.js":"28","C:\\code\\mit\\RL_app\\src\\navigation\\index.js":"29","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\break.reducer.js":"30","C:\\code\\mit\\RL_app\\src\\redux\\index.js":"31"},{"size":3790,"mtime":1610809564009,"results":"32","hashOfConfig":"33"},{"size":768,"mtime":1610803350848,"results":"34","hashOfConfig":"33"},{"size":517,"mtime":1609573919413,"results":"35","hashOfConfig":"33"},{"size":1343,"mtime":1610808897434,"results":"36","hashOfConfig":"33"},{"size":341,"mtime":1610784235963,"results":"37","hashOfConfig":"33"},{"size":2976,"mtime":1610981812169,"results":"38","hashOfConfig":"33"},{"size":79,"mtime":1609847029297,"results":"39","hashOfConfig":"33"},{"size":1110,"mtime":1610622340784,"results":"40","hashOfConfig":"33"},{"size":1262,"mtime":1610597903303,"results":"41","hashOfConfig":"33"},{"size":375,"mtime":1609573919416,"results":"42","hashOfConfig":"33"},{"size":1566,"mtime":1610783091191,"results":"43","hashOfConfig":"33"},{"size":2157,"mtime":1610806442829,"results":"44","hashOfConfig":"33"},{"size":607,"mtime":1610802201776,"results":"45","hashOfConfig":"33"},{"size":306,"mtime":1609847029298,"results":"46","hashOfConfig":"33"},{"size":1081,"mtime":1610597903297,"results":"47","hashOfConfig":"33"},{"size":5816,"mtime":1610806541339,"results":"48","hashOfConfig":"33"},{"size":205,"mtime":1610597903301,"results":"49","hashOfConfig":"33"},{"size":737,"mtime":1610597903302,"results":"50","hashOfConfig":"33"},{"size":523,"mtime":1610622277469,"results":"51","hashOfConfig":"33"},{"size":6925,"mtime":1610710070542,"results":"52","hashOfConfig":"33"},{"size":226,"mtime":1609573919415,"results":"53","hashOfConfig":"33"},{"size":129,"mtime":1609674823101,"results":"54","hashOfConfig":"33"},{"size":3690,"mtime":1610978845919,"results":"55","hashOfConfig":"33"},{"size":432,"mtime":1610701033521,"results":"56","hashOfConfig":"33"},{"size":461,"mtime":1610597903300,"results":"57","hashOfConfig":"33"},{"size":587,"mtime":1610600783281,"results":"58","hashOfConfig":"33"},{"size":790,"mtime":1609573919414,"results":"59","hashOfConfig":"33"},{"size":339,"mtime":1609573919412,"results":"60","hashOfConfig":"33"},{"size":1070,"mtime":1610806664598,"results":"61","hashOfConfig":"33"},{"size":1358,"mtime":1610804409706,"results":"62","hashOfConfig":"33"},{"size":660,"mtime":1610600845745,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"138jipk",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\mit\\RL_app\\src\\screens\\CalendarScreen\\index.jsx",["146"],"import React, { useState } from \"react\";\r\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport { Modal } from \"antd\";\r\nimport * as dates from \"../../utils/dates\";\r\nimport \"./styles.css\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\nconst DnDCalendar = withDragAndDrop(Calendar);\r\n\r\nconst ColoredDateCellWrapper = ({ children }) =>\r\n  React.cloneElement(React.Children.only(children), {\r\n    style: {\r\n      backgroundColor: \"lightblue\",\r\n    },\r\n  });\r\n\r\nconst CalendarScreen = (props) => {\r\n  const [events, setEvents] = useState([\r\n    {\r\n      start: moment().toDate(),\r\n      end: moment().add(1, \"days\").toDate(),\r\n      title: \"Test\",\r\n      id: 1,\r\n    },\r\n  ]);\r\n  const [draggedEvent, setDraggedEvent] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(null);\r\n\r\n  const resizeEvent = ({ event, start, end }) => {\r\n    console.log(\"looi\", event);\r\n    const nextEvents = events.map((existingEvent) => {\r\n      return existingEvent.id === event.id\r\n        ? { ...existingEvent, start, end }\r\n        : existingEvent;\r\n    });\r\n\r\n    setEvents(nextEvents);\r\n  };\r\n\r\n  const moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\r\n    let allDay = event.allDay;\r\n\r\n    if (!event.allDay && droppedOnAllDaySlot) {\r\n      allDay = true;\r\n    } else if (event.allDay && !droppedOnAllDaySlot) {\r\n      allDay = false;\r\n    }\r\n\r\n    const nextEvents = events.map((existingEvent) => {\r\n      return existingEvent.id === event.id\r\n        ? { ...existingEvent, start, end, allDay }\r\n        : existingEvent;\r\n    });\r\n\r\n    setEvents(nextEvents);\r\n\r\n    // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\r\n  };\r\n\r\n  const newEvent = ({ slots, start, end }) => {\r\n    setModalVisible(true);\r\n    let idList = events.map((a) => a.id);\r\n    let newId = Math.max(...idList) + 1;\r\n    let hour = {\r\n      id: newId,\r\n      title: \"New Event\",\r\n      allDay: slots.length === 1,\r\n      start: start,\r\n      end: end,\r\n    };\r\n\r\n    setEvents(events.concat([hour]));\r\n  };\r\n\r\n  const onDropFromOutside = ({ start, end, allDay }) => {\r\n    const event = {\r\n      id: draggedEvent.id,\r\n      title: draggedEvent.title,\r\n      start,\r\n      end,\r\n      allDay: allDay,\r\n    };\r\n\r\n    setDraggedEvent(null);\r\n    this.moveEvent({ event, start, end });\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <Modal\r\n        visible={modalVisible}\r\n        onOk={() => {\r\n          setModalVisible(false);\r\n        }}\r\n        onCancel={() => {\r\n          setModalVisible(false);\r\n        }}\r\n      >\r\n        Hello\r\n      </Modal>\r\n      <DnDCalendar\r\n        selectable\r\n        resizable={true}\r\n        events={events}\r\n        views={[\"day\", \"week\", \"month\"]}\r\n        // step={60}\r\n        showMultiDayTimes\r\n        defaultDate={new Date()}\r\n        onSelectSlot={newEvent}\r\n        components={{\r\n          timeSlotWrapper: ColoredDateCellWrapper,\r\n        }}\r\n        localizer={localizer}\r\n        max={dates.add(dates.endOf(new Date(), \"day\"), -1, \"hours\")}\r\n        style={{ height: props.height ? props.height : window.innerHeight }}\r\n        onEventResize={resizeEvent}\r\n        onEventDrop={moveEvent}\r\n        onDropFromOutside={onDropFromOutside}\r\n        handleDragStart={(event) => {\r\n          console.log(event);\r\n          setDraggedEvent(event);\r\n        }}\r\n        dragFromOutsideItem={draggedEvent}\r\n        onDragStart={console.log(\"hmm\")}\r\n        resizableAccessor={() => false}\r\n        onSelectEvent={() => {\r\n          //add code for editing an existing event here\r\n          setModalVisible(true);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarScreen;\r\n",["147","148"],"C:\\code\\mit\\RL_app\\src\\redux\\actions\\break.action.js",[],["149","150"],"C:\\code\\mit\\RL_app\\src\\index.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\PopupScreen\\index.jsx",["151","152"],"import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BreakActions, PastActions } from \"../../redux/actions\";\r\nimport { Button } from \"antd\";\r\n\r\n//TO-DO: add style\r\nconst PopupScreen = () => {\r\n  let dispatch = useDispatch();\r\n  return (\r\n    <div style={{ backgroundColor: \"white\", padding: \"3%\" }}>\r\n      <div\r\n        style={{\r\n          color: \"#7DCAB6\",\r\n          fontSize: \"22px\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        It's time to break!\r\n      </div>\r\n      <div style={{ paddingTop: \"3%\", fontSize: \"15px\" }}>\r\n        Should we get started? This break will start automatically if you ignore\r\n        this pop up\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          marginTop: \"10%\",\r\n        }}\r\n      >\r\n        <Button\r\n          onClick={() => dispatch(BreakActions.cancelBreak())}\r\n          style={{ color: \"#7DCAB6\", borderWidth: 0 }}\r\n        >\r\n          CANCEL\r\n        </Button>\r\n        <Button\r\n          onClick={() => dispatch(BreakActions.startBreak())}\r\n          style={{ color: \"#7DCAB6\", borderWidth: 0 }}\r\n        >\r\n          CONTINUE\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default PopupScreen;\r\n",["153","154"],"C:\\code\\mit\\RL_app\\src\\redux\\types\\break.types.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\index.jsx",["155","156"],"C:\\code\\mit\\RL_app\\src\\redux\\actions\\test.action.js",[],"C:\\code\\mit\\RL_app\\src\\redux\\actions\\onboarding.action.js",[],["157","158"],"C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\FinishingUp.jsx",["159","160","161","162"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Input } from \"antd\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst FinishingUpScreen = (props) => {\r\n  const [breakArray, setBreakArray] = useState([\"https://www.youtube.com\"]);\r\n\r\n  return (\r\n    <div className=\"step-container\">\r\n      <h1>You're Almost Done!</h1>\r\n      <div style={{ marginTop: \"3%\", width: \"70%\" }}>\r\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\r\n          Thanks for your input! Based on your preferences, we have created a\r\n          schedule as shown below. On an average, you have 9 breaks in a day\r\n          <br />\r\n          <br />\r\n        </p>\r\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\r\n          If you want to make any changes, click on the back button and change\r\n          your settings. You can always come back and make edits to your\r\n          schedule and overrides in 'My Settings'.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishingUpScreen);\r\n","C:\\code\\mit\\RL_app\\src\\reportWebVitals.js",[],["163","164"],"C:\\code\\mit\\RL_app\\src\\redux\\reducers\\onboarding.reducer.js",[],["165","166"],"C:\\code\\mit\\RL_app\\src\\components\\Toolbar.js",["167","168","169"],"import \"./styles.css\";\r\nimport { BreakActions, PastActions } from \"../redux/actions\";\r\nimport exitFullscreen from \"../assets/exit-fullscreen.png\";\r\nimport fullscreen from \"../assets/fullscreen.png\";\r\nimport { store } from \"../redux\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Toolbar(props) {\r\n  let mounted = true;\r\n  useEffect(() => {\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  });\r\n\r\n  const [minsRem, setMinsRem] = useState(\r\n    Math.ceil((new Date() - new Date(props.startTime)) / 60000)\r\n  );\r\n  setTimeout(() => {\r\n    setMinsRem(minsRem - 1);\r\n  }, 60000);\r\n  let str;\r\n  if (minsRem != 1) str = minsRem + \" Minutes remaining\";\r\n  else str = minsRem + \" Minute remaining\";\r\n  if (props.type === \"minimize\")\r\n    return (\r\n      <div className=\"toolbar\">\r\n        <div className=\"minutes-remaining\">{str}</div>\r\n        <button\r\n          className=\"minimize-break2\"\r\n          onClick={() => {\r\n            if (mounted) props.minimize(true);\r\n          }}\r\n        >\r\n          <img\r\n            src={exitFullscreen}\r\n            alt=\"Mountains\"\r\n            width=\"70\"\r\n            height=\"70\"\r\n          ></img>\r\n        </button>\r\n        <button\r\n          className=\"close-break2\"\r\n          onClick={() => {\r\n            store.dispatch(BreakActions.endBreak());\r\n          }}\r\n        >\r\n          &#10006;\r\n        </button>\r\n      </div>\r\n    );\r\n  else\r\n    return (\r\n      <div className=\"toolbar2\">\r\n        <div className=\"minutes-remaining2\">{str}</div>\r\n        <div className=\"break-text-min\">{props.message}</div>\r\n        <div>\r\n          <button\r\n            className=\"minimize-break3\"\r\n            onClick={() => {\r\n              if (mounted) props.minimize(false);\r\n            }}\r\n          >\r\n            <img src={fullscreen} alt=\"Mountains\" width=\"70\" height=\"70\"></img>\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <button\r\n            className=\"close-break3\"\r\n            onClick={() => {\r\n              store.dispatch(BreakActions.endBreak());\r\n            }}\r\n          >\r\n            &#10006;\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n",["170","171"],"C:\\code\\mit\\RL_app\\src\\App.js",["172"],"import React, { useEffect } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport { store } from \"./redux\";\r\nimport Main from \"./navigation\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n\r\nfunction App() {\r\n  // useEffect(() => {\r\n  //   Firebase.initializeApp(config);\r\n  // }, []);\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <Main />\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\test.reducer.js",[],"C:\\code\\mit\\RL_app\\src\\components\\Timer.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\BreakScreen\\index.jsx",["173","174","175","176","177"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./styles.css\";\r\nimport { store } from \"../../redux\";\r\n\r\nimport Timer from \"../../components/Timer\";\r\nimport ToolBar from \"../../components/Toolbar\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BreakActions, PastActions } from \"../../redux/actions\";\r\n\r\nimport s1 from \"../../assets/s1.png\";\r\nimport s2 from \"../../assets/s2.png\";\r\nimport s3 from \"../../assets/s3.png\";\r\nimport s4 from \"../../assets/s4.png\";\r\nimport s5 from \"../../assets/s5.png\";\r\n\r\nimport s1y from \"../../assets/s1y.png\";\r\nimport s2y from \"../../assets/s2y.png\";\r\nimport s3y from \"../../assets/s3y.png\";\r\nimport s4y from \"../../assets/s4y.png\";\r\nimport s5y from \"../../assets/s5y.png\";\r\n\r\nvar electron = window.require(\"electron\");\r\nvar curWindow = electron.remote.getCurrentWindow();\r\n\r\nconst BreakScreen = () => {\r\n  let mounted = true;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  });\r\n\r\n  const breakState = useSelector((state) => state.break.breakState);\r\n  const dispatch = useDispatch();\r\n\r\n  const [rate, setRate] = useState(0);\r\n  const [feedbackText, setFeedbackText] = useState(\"\");\r\n  const [minimized, setMinimized] = useState(false);\r\n\r\n  const breakDuration = store.getState().break.breakDuration;\r\n  const breakStartTime = store.getState().break.breakStartTime;\r\n\r\n  if (breakState === \"break\" && !minimized) {\r\n    curWindow.unmaximize();\r\n    curWindow.setSize(\r\n      electron.remote.screen.getPrimaryDisplay().size.width,\r\n      Math.ceil(electron.remote.screen.getPrimaryDisplay().size.height)\r\n    );\r\n    curWindow.setPosition(0, 0);\r\n\r\n    return (\r\n      <div className=\"break-div\">\r\n        <ToolBar\r\n          type=\"minimize\"\r\n          minimize={setMinimized}\r\n          totaltime={breakDuration}\r\n          startTime={breakStartTime}\r\n        />\r\n        <div className=\"circle\"></div>\r\n      <div className=\"break-text\">Get up and drink some water!</div>\r\n      </div>\r\n    );\r\n  } else if (breakState === \"break\" && minimized) {\r\n    curWindow.unmaximize();\r\n    curWindow.setSize(\r\n      electron.remote.screen.getPrimaryDisplay().size.width,\r\n      Math.ceil(electron.remote.screen.getPrimaryDisplay().size.height / 8)\r\n    );\r\n    curWindow.setPosition(\r\n      0,\r\n      (7 / 8) * electron.remote.screen.getPrimaryDisplay().size.height\r\n    );\r\n\r\n    return (\r\n      <div className=\"break-div\">\r\n        <ToolBar\r\n          type=\"maximize\"\r\n          minimize={setMinimized}\r\n          totaltime={breakDuration}\r\n          startTime={breakStartTime}\r\n          message={\"Be kind!\"}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    curWindow.maximize();\r\n    curWindow.setSize(800, 600);\r\n\r\n    return (\r\n      <div className=\"break-div\">\r\n        <button\r\n          className=\"close-break\"\r\n          onClick={() => {\r\n            let dat = {\r\n              ...store.getState().break,\r\n              breakEndTime: new Date().toISOString(),\r\n              rating: rate,\r\n              notes: feedbackText,\r\n            };\r\n            delete dat.breakState;\r\n            delete dat.windowChanged;\r\n            dispatch(PastActions.saveBreakData(dat));\r\n            dispatch(BreakActions.closeBreakScreen());\r\n          }}\r\n        >\r\n          <div>&#10006;</div>\r\n          <div className=\"save-button-text\">Save feedback and close</div>\r\n        </button>\r\n        <div className=\"break-completed-text\">\r\n          Break completed successfully!\r\n        </div>\r\n\r\n        <div className=\"feedback-text-box\">\r\n          <div className=\"floating-label\">Notes</div>\r\n          <textarea\r\n            onChange={(event) => {\r\n              if (mounted) setFeedbackText(event.target.value);\r\n            }}\r\n            data-role=\"none\"\r\n            rows=\"3\"\r\n            cols=\"80\"\r\n            placeholder=\"Type in here any notes or reflections about the break that you would like to save\"\r\n            className=\"feedback-text\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"feedback-request-text\">How was this break?</div>\r\n\r\n        <div className=\"break-feedback\">\r\n          {getImageButton(s5, s5y, 1, rate, setRate, mounted)}\r\n          {getImageButton(s4, s4y, 2, rate, setRate, mounted)}\r\n          {getImageButton(s3, s3y, 3, rate, setRate, mounted)}\r\n          {getImageButton(s2, s2y, 4, rate, setRate, mounted)}\r\n          {getImageButton(s1, s1y, 5, rate, setRate, mounted)}\r\n        </div>\r\n\r\n        <div style={{ display: \"flex\" }}>\r\n          <div style={{ width: \"7vw\", textAlign: \"left\", paddingLeft: \"0vw\" }}>\r\n            Not Helpful\r\n          </div>\r\n          <div style={{ width: \"28vw\" }} />\r\n          <div\r\n            style={{ width: \"4vw\", textAlign: \"right\", paddingRight: \"1vw\" }}\r\n          >\r\n            Helpful\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nlet getImageButton = (name, name2, points, rate, setRate, mounted) => {\r\n  if (points == rate)\r\n    return (\r\n      <div className=\"responsive\">\r\n        <div className=\"gallery\">\r\n          <button\r\n            className=\"feedback-button\"\r\n            onClick={() => {\r\n              if (mounted) setRate(points);\r\n            }}\r\n          >\r\n            <img src={name2} alt=\"Mountains\" width=\"85\" height=\"85\"></img>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  else\r\n    return (\r\n      <div className=\"responsive\">\r\n        <div className=\"gallery\">\r\n          <button\r\n            className=\"feedback-button\"\r\n            onClick={() => {\r\n              if (mounted) setRate(points);\r\n            }}\r\n          >\r\n            <img src={name} alt=\"Mountains\" width=\"85\" height=\"85\"></img>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default BreakScreen;\r\n",["178","179"],"C:\\code\\mit\\RL_app\\src\\redux\\types\\past.types.js",[],["180","181"],"C:\\code\\mit\\RL_app\\src\\screens\\HomeScreen\\index.jsx",["182"],"import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { testAction } from \"../../redux/actions/test.action\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst HomeScreen = (props) => {\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    // props._testAction();\r\n  }, []);\r\n  return <div>Hello world {props.test.value}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { test: state.test };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      _testAction: testAction,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\r\n",["183","184"],"C:\\code\\mit\\RL_app\\src\\redux\\types\\onboarding.types.js",[],["185","186"],"C:\\code\\mit\\RL_app\\src\\services\\awclient.service.js",["187","188"],"import { AWClient } from \"aw-client\";\r\n\r\nclass AWClientService {\r\n  constructor() {\r\n    this.client = new AWClient(\"test-client\");\r\n    this.todayDate = new Date();\r\n    this.tmrwDate = new Date();\r\n    this.todayDate.setHours(0, 0, 0, 0);\r\n    this.tmrwDate.setHours(23, 59, 59, 999);\r\n    this.todayDate = this.todayDate.toISOString();\r\n    this.tmrwDate = this.tmrwDate.toISOString();\r\n    this.client.getBuckets().then((buckets) => {\r\n      this.bucketMap = {};\r\n      for (var bucketid in buckets) {\r\n        this.bucketMap[buckets[bucketid].client] = bucketid;\r\n      }\r\n    });\r\n  }\r\n\r\n  createBucketMap() {\r\n    return this.client.getBuckets().then((buckets) => {\r\n      this.bucketMap = {};\r\n      for (var bucketid in buckets) {\r\n        this.bucketMap[buckets[bucketid].client] = bucketid;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateDate() {\r\n    this.todayDate = new Date();\r\n    this.tmrwDate = new Date();\r\n    this.todayDate.setHours(0, 0, 0, 0);\r\n    this.tmrwDate.setHours(23, 59, 59, 999);\r\n    this.todayDate = this.todayDate.toISOString();\r\n    this.tmrwDate = this.tmrwDate.toISOString();\r\n  }\r\n\r\n  //get today's active windows in order\r\n  async getActiveWindows() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n      const query = [\r\n        \"RETURN=query_bucket('\" + this.bucketMap[\"aw-watcher-window\"] + \"')\",\r\n      ];\r\n      const activeWindows = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      return activeWindows[0];\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //get all active windows since the beginning\r\n  async getActiveWindowsSinceBeginning() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n      const query = [\r\n        \"RETURN=query_bucket('\" + this.bucketMap[\"aw-watcher-window\"] + \"')\",\r\n      ];\r\n      const activeWindows = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      return activeWindows[0];\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //get today's afk in order\r\n  async getAFK() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n\r\n      var query = [\r\n        \"bucket='\" + this.bucketMap[\"aw-watcher-afk\"] + \"';\",\r\n        \"RETURN=query_bucket(bucket);\",\r\n      ];\r\n      const afk = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      return afk[0];\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getAppTotals() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n\r\n      var query = [\r\n        \"window_events = query_bucket('\" +\r\n          this.bucketMap[\"aw-watcher-window\"] +\r\n          \"');\",\r\n        \"events = merge_events_by_keys(window_events, ['app','title']);\",\r\n        \"events = sort_by_duration(events);\",\r\n        \"RETURN = events;\",\r\n      ];\r\n      const queryWindows = [\r\n        \"window_events = query_bucket('\" + \"aw-watcher-web-chrome\" + \"');\",\r\n        \"events = merge_events_by_keys(window_events, ['title','url']);\",\r\n        \"events = sort_by_duration(events);\",\r\n        \"RETURN = events;\",\r\n      ];\r\n      const appTotalWithoutAudio = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      const websiteTotals = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        queryWindows\r\n      );\r\n      return {\r\n        appTotal: appTotalWithoutAudio[0],\r\n        websiteTotals: websiteTotals[0],\r\n      };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //find total time per app in the day excluding video streaming AFK\r\n  async getAppTotalsIntersectAFKWithoutAudio() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n\r\n      var query = [\r\n        \"window_events = query_bucket('\" +\r\n          this.bucketMap[\"aw-watcher-window\"] +\r\n          \"');\",\r\n        \"not_afk_events = query_bucket('\" +\r\n          this.bucketMap[\"aw-watcher-afk\"] +\r\n          \"');\",\r\n        \"not_afk_events = filter_keyvals(not_afk_events, 'status', ['not-afk']);\",\r\n        \"window_events = filter_period_intersect(window_events, not_afk_events);\",\r\n        \"events = merge_events_by_keys(window_events, ['app']);\",\r\n        \"events = sort_by_duration(events);\",\r\n        \"RETURN = events;\",\r\n      ];\r\n      const appTotalWithoutAudio = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      return appTotalWithoutAudio[0];\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //find total time per app in the day including video streaming AFK\r\n  async getAppTotalIntersectAFKWithAudio() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n\r\n      var query = [\r\n        \"window_events = query_bucket('\" +\r\n          this.bucketMap[\"aw-watcher-window\"] +\r\n          \"');\",\r\n        \"not_afk_events = query_bucket('\" +\r\n          this.bucketMap[\"aw-watcher-afk\"] +\r\n          \"');\",\r\n        \"not_afk_events = filter_keyvals(not_afk_events, 'status', ['not-afk']);\",\r\n        \"web_events = query_bucket('\" + this.bucketMap[\"aw-client-web\"] + \"');\",\r\n        \"audible_events = filter_keyvals(web_events, 'audible', [true]);\",\r\n        \"afk_events = query_bucket('\" +\r\n          this.bucketMap[\"aw-watcher-afk\"] +\r\n          \"');\",\r\n        \"afk_events = filter_keyvals(afk_events, 'status', ['afk']);\",\r\n        \"audible_afk_events = filter_period_intersect(audible_events,afk_events);\",\r\n        \"not_afk_events = concat(not_afk_events, audible_afk_events);\",\r\n        \"window_events = filter_period_intersect(window_events, not_afk_events);\",\r\n        \"events = merge_events_by_keys(window_events, ['app','url']);\",\r\n        \"events = sort_by_duration(events);\",\r\n        \"RETURN = events;\",\r\n      ];\r\n\r\n      const appTotalWithAudio = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      return appTotalWithAudio[0];\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //find currently active window\r\n  async getCurrentlyActiveWindow() {\r\n    try {\r\n      this.updateDate();\r\n      if (typeof this.bucketMap === \"undefined\") await this.createBucketMap();\r\n\r\n      var query = [\r\n        \"RETURN=query_bucket('\" + this.bucketMap[\"aw-watcher-window\"] + \"')\",\r\n      ];\r\n\r\n      const activeWindows = await this.client.query(\r\n        [this.todayDate + \"/\" + this.tmrwDate],\r\n        query\r\n      );\r\n      return activeWindows[0][0];\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AWClientService;\r\n","C:\\code\\mit\\RL_app\\src\\redux\\sagas\\index.js",["189"],"C:\\code\\mit\\RL_app\\src\\services\\index.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\PersonalInformation.jsx",["190","191","192","193"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Input, Button, Modal } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport ApiCalendar from \"react-google-calendar-api\";\r\n\r\nimport { OnboardingActions } from \"../../redux/actions\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst { shell } = window.require(\"electron\").remote;\r\nconst { ipcRenderer } = window.require(\"electron\");\r\n\r\nconst PersonalInformationScreen = (props) => {\r\n  const [message, setMessage] = useState(\"Drink Water\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    ipcRenderer.on(\"calendar-success\", (event, data) => {\r\n      console.log(\"data\", data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"step-container\">\r\n      <Modal\r\n        title=\"Basic Modal\"\r\n        visible={isModalVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n      >\r\n        <p>Some contents...</p>\r\n        <p>Some contents...</p>\r\n        <p>Some contents...</p>\r\n      </Modal>\r\n      <h1>Personal Information</h1>\r\n      <Input\r\n        size=\"large\"\r\n        style={{ width: \"30%\", borderRadius: 5, verticalAlign: \"center\" }}\r\n        placeholder=\"First Name\"\r\n        value={props.onboarding.name}\r\n        onChange={(e) => {\r\n          props.setName(e.target.value);\r\n        }}\r\n      />\r\n      <div style={{ marginTop: \"3%\" }}>\r\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\r\n          Would you like any message to show up during the break? (e.g. drink\r\n          water, be kind, etc.)\r\n        </p>\r\n        <p style={{ fontSize: \"15px\", color: \"#696969\", width: \"60%\" }}>\r\n          You can set up to 10 messages, the messages will appear interchangebly\r\n          on different breaks\r\n        </p>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n          <Input\r\n            size=\"large\"\r\n            style={{\r\n              width: \"30%\",\r\n              borderRadius: 5,\r\n              verticalAlign: \"center\",\r\n            }}\r\n            placeholder=\"Break Message\"\r\n            value={props.onboarding.breakMessage}\r\n            onChange={(e) => {\r\n              props.setBreakMessage(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div style={{ marginTop: \"3%\" }}>\r\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\r\n          Add a calendar to help us keep track of any meetings/breaks we should\r\n          work around\r\n        </p>\r\n        <Button\r\n          type=\"primary\"\r\n          style={{ borderRadius: \"20px\", marginTop: \"1%\" }}\r\n          size=\"large\"\r\n          onClick={() => {\r\n            // ApiCalendar.handleAuthClick();\r\n            // ApiCalendar.onLoad(() => {\r\n            //   ApiCalendar.listenSign(signUpdate);\r\n            // });\r\n            shell.openExternal(\"http://localhost:3006/\");\r\n          }}\r\n        >\r\n          <PlusOutlined style={{ color: \"white\" }} />\r\n          ADD CALENDAR\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { onboarding: state.onboarding };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      setName: OnboardingActions.setName,\r\n      setBreakMessage: OnboardingActions.setBreakMessage,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PersonalInformationScreen);\r\n","C:\\code\\mit\\RL_app\\src\\breakmanager\\index.js",["194"],"C:\\code\\mit\\RL_app\\src\\redux\\reducers\\index.js",["195"],"C:\\code\\mit\\RL_app\\src\\redux\\store.js",[],"C:\\code\\mit\\RL_app\\src\\redux\\configureStore.js",["196"],"C:\\code\\mit\\RL_app\\src\\components\\Loading.js",[],"C:\\code\\mit\\RL_app\\src\\navigation\\index.js",["197","198"],"C:\\code\\mit\\RL_app\\src\\redux\\reducers\\break.reducer.js",[],"C:\\code\\mit\\RL_app\\src\\redux\\index.js",[],{"ruleId":"199","severity":1,"message":"200","line":2,"column":37,"nodeType":"201","messageId":"202","endLine":2,"endColumn":42},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"203","replacedBy":"207"},{"ruleId":"205","replacedBy":"208"},{"ruleId":"199","severity":1,"message":"209","line":3,"column":23,"nodeType":"201","messageId":"202","endLine":3,"endColumn":34},{"ruleId":"199","severity":1,"message":"210","line":4,"column":24,"nodeType":"201","messageId":"202","endLine":4,"endColumn":35},{"ruleId":"203","replacedBy":"211"},{"ruleId":"205","replacedBy":"212"},{"ruleId":"199","severity":1,"message":"213","line":14,"column":10,"nodeType":"201","messageId":"202","endLine":14,"endColumn":31},{"ruleId":"214","severity":1,"message":"215","line":32,"column":6,"nodeType":"216","endLine":32,"endColumn":8,"suggestions":"217"},{"ruleId":"203","replacedBy":"218"},{"ruleId":"205","replacedBy":"219"},{"ruleId":"199","severity":1,"message":"220","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":26},{"ruleId":"199","severity":1,"message":"221","line":4,"column":10,"nodeType":"201","messageId":"202","endLine":4,"endColumn":15},{"ruleId":"199","severity":1,"message":"222","line":9,"column":10,"nodeType":"201","messageId":"202","endLine":9,"endColumn":20},{"ruleId":"199","severity":1,"message":"223","line":9,"column":22,"nodeType":"201","messageId":"202","endLine":9,"endColumn":35},{"ruleId":"203","replacedBy":"224"},{"ruleId":"205","replacedBy":"225"},{"ruleId":"203","replacedBy":"226"},{"ruleId":"205","replacedBy":"227"},{"ruleId":"199","severity":1,"message":"210","line":2,"column":24,"nodeType":"201","messageId":"202","endLine":2,"endColumn":35},{"ruleId":"214","severity":1,"message":"228","line":12,"column":17,"nodeType":"229","endLine":12,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":23,"column":15,"nodeType":"232","messageId":"233","endLine":23,"endColumn":17},{"ruleId":"203","replacedBy":"234"},{"ruleId":"205","replacedBy":"235"},{"ruleId":"199","severity":1,"message":"220","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":26},{"ruleId":"199","severity":1,"message":"236","line":2,"column":10,"nodeType":"201","messageId":"202","endLine":2,"endColumn":20},{"ruleId":"199","severity":1,"message":"237","line":7,"column":8,"nodeType":"201","messageId":"202","endLine":7,"endColumn":13},{"ruleId":"214","severity":1,"message":"228","line":33,"column":17,"nodeType":"229","endLine":33,"endColumn":22},{"ruleId":"238","severity":1,"message":"239","line":155,"column":3,"nodeType":"240","messageId":"241","endLine":155,"endColumn":15},{"ruleId":"230","severity":1,"message":"242","line":159,"column":14,"nodeType":"232","messageId":"233","endLine":159,"endColumn":16},{"ruleId":"203","replacedBy":"243"},{"ruleId":"205","replacedBy":"244"},{"ruleId":"203","replacedBy":"245"},{"ruleId":"205","replacedBy":"246"},{"ruleId":"199","severity":1,"message":"247","line":10,"column":9,"nodeType":"201","messageId":"202","endLine":10,"endColumn":16},{"ruleId":"203","replacedBy":"248"},{"ruleId":"205","replacedBy":"249"},{"ruleId":"203","replacedBy":"250"},{"ruleId":"205","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":108,"column":42,"nodeType":"232","messageId":"254","endLine":108,"endColumn":43},{"ruleId":"252","severity":1,"message":"253","line":108,"column":68,"nodeType":"232","messageId":"254","endLine":108,"endColumn":69},{"ruleId":"199","severity":1,"message":"255","line":1,"column":15,"nodeType":"201","messageId":"202","endLine":1,"endColumn":19},{"ruleId":"199","severity":1,"message":"256","line":6,"column":8,"nodeType":"201","messageId":"202","endLine":6,"endColumn":19},{"ruleId":"199","severity":1,"message":"257","line":16,"column":10,"nodeType":"201","messageId":"202","endLine":16,"endColumn":17},{"ruleId":"199","severity":1,"message":"258","line":16,"column":19,"nodeType":"201","messageId":"202","endLine":16,"endColumn":29},{"ruleId":"199","severity":1,"message":"259","line":19,"column":9,"nodeType":"201","messageId":"202","endLine":19,"endColumn":18},{"ruleId":"199","severity":1,"message":"260","line":2,"column":8,"nodeType":"201","messageId":"202","endLine":2,"endColumn":23},{"ruleId":"199","severity":1,"message":"261","line":1,"column":27,"nodeType":"201","messageId":"202","endLine":1,"endColumn":34},{"ruleId":"262","severity":1,"message":"263","line":5,"column":1,"nodeType":"264","endLine":29,"endColumn":3},{"ruleId":"199","severity":1,"message":"265","line":6,"column":7,"nodeType":"201","messageId":"202","endLine":6,"endColumn":17},{"ruleId":"214","severity":1,"message":"266","line":14,"column":39,"nodeType":"216","endLine":14,"endColumn":41,"suggestions":"267"},"no-unused-vars","'Views' is defined but never used.","Identifier","unusedVar","no-native-reassign",["268"],"no-negated-in-lhs",["269"],["268"],["269"],"'useSelector' is defined but never used.","'PastActions' is defined but never used.",["268"],["269"],"'setOnboardingComplete' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'props.onboarding.complete'. Either include them or remove the dependency array.","ArrayExpression",["270"],["268"],["269"],"'useEffect' is defined but never used.","'Input' is defined but never used.","'breakArray' is assigned a value but never used.","'setBreakArray' is assigned a value but never used.",["268"],["269"],["268"],["269"],"Assignments to the 'mounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["268"],["269"],"'useHistory' is defined but never used.","'Timer' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","Expected '===' and instead saw '=='.",["268"],["269"],["268"],["269"],"'history' is assigned a value but never used.",["268"],["269"],["268"],["269"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'fork' is defined but never used.","'ApiCalendar' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'showModal' is assigned a value but never used.","'databaseUpdater' is defined but never used.","'Reducer' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'HomeScreen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["271"],"no-global-assign","no-unsafe-negation",{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},"Update the dependencies array to be: [history, props.onboarding.complete]",{"range":"276","text":"277"},"Update the dependencies array to be: [history]",{"range":"278","text":"279"},[1077,1079],"[history, props.onboarding.complete]",[703,705],"[history]"]