[{"/Users/shriramchenniappa/Desktop/personal/RL_app/src/reportWebVitals.js":"1","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/sagas/index.js":"2","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/DatabaseUpdater/index.js":"3","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/EditScheduledBreaks/index.jsx":"4","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/activityrule.break.js":"5","/Users/shriramchenniappa/Desktop/personal/RL_app/src/services/awclient.service.js":"6","/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Games/stroop_test/index.jsx":"7","/Users/shriramchenniappa/Desktop/personal/RL_app/src/index.js":"8","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/reducers/index.js":"9","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/EventHandler/index.js":"10","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/EditRegularBreaksScreen/index.jsx":"11","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/WeeklyForm/index.jsx":"12","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/interval.break.js":"13","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/RegularBreaks.jsx":"14","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/types/break.types.js":"15","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/actions/index.js":"16","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/NewHomeScreen/index.jsx":"17","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/scheduled.break.js":"18","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/AdHocBreaks.jsx":"19","/Users/shriramchenniappa/Desktop/personal/RL_app/src/utils/dates.js":"20","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/index.js":"21","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/BreakFeedbackScreen/index.jsx":"22","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/reducers/break.reducer.js":"23","/Users/shriramchenniappa/Desktop/personal/RL_app/src/services/index.js":"24","/Users/shriramchenniappa/Desktop/personal/RL_app/src/App.js":"25","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/index.jsx":"26","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/CalendarScreen/index.jsx":"27","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/StroopScreen/index.jsx":"28","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/PopupScreen/index.jsx":"29","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/SuddenScreen/index.jsx":"30","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/FinishingUp.jsx":"31","/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Games/fruit_ninja_manager.jsx":"32","/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Calendar.jsx":"33","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/ScheduledBreaks.jsx":"34","/Users/shriramchenniappa/Desktop/personal/RL_app/src/navigation/index.js":"35","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/AnalyticsScreen/index.jsx":"36","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/reducers/onboarding.reducer.js":"37","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/PersonalInformation.jsx":"38","/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Loading.js":"39","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/LoginScreen/index.jsx":"40","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/actions/onboarding.action.js":"41","/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/types/past.types.js":"42"},{"size":362,"mtime":1635575447170,"results":"43","hashOfConfig":"44"},{"size":215,"mtime":1635575447168,"results":"45","hashOfConfig":"44"},{"size":1979,"mtime":1635575447155,"results":"46","hashOfConfig":"44"},{"size":5831,"mtime":1635575447178,"results":"47","hashOfConfig":"44"},{"size":7385,"mtime":1636381038808,"results":"48","hashOfConfig":"44"},{"size":10115,"mtime":1638425187836,"results":"49","hashOfConfig":"44"},{"size":3658,"mtime":1635575447161,"results":"50","hashOfConfig":"44"},{"size":500,"mtime":1635575447163,"results":"51","hashOfConfig":"44"},{"size":444,"mtime":1635575447166,"results":"52","hashOfConfig":"44"},{"size":3374,"mtime":1640179367202,"results":"53","hashOfConfig":"44"},{"size":4123,"mtime":1635575447177,"results":"54","hashOfConfig":"44"},{"size":6020,"mtime":1637083479000,"results":"55","hashOfConfig":"44"},{"size":1518,"mtime":1636312992063,"results":"56","hashOfConfig":"44"},{"size":2815,"mtime":1635575447182,"results":"57","hashOfConfig":"44"},{"size":839,"mtime":1635575447168,"results":"58","hashOfConfig":"44"},{"size":211,"mtime":1635575447164,"results":"59","hashOfConfig":"44"},{"size":1554,"mtime":1636383288082,"results":"60","hashOfConfig":"44"},{"size":2372,"mtime":1636312992063,"results":"61","hashOfConfig":"44"},{"size":14001,"mtime":1640439713787,"results":"62","hashOfConfig":"44"},{"size":3686,"mtime":1635575447189,"results":"63","hashOfConfig":"44"},{"size":593,"mtime":1637612986464,"results":"64","hashOfConfig":"44"},{"size":13407,"mtime":1637612986466,"results":"65","hashOfConfig":"44"},{"size":5230,"mtime":1635575447166,"results":"66","hashOfConfig":"44"},{"size":127,"mtime":1635575447188,"results":"67","hashOfConfig":"44"},{"size":628,"mtime":1640180287505,"results":"68","hashOfConfig":"44"},{"size":11859,"mtime":1637612986469,"results":"69","hashOfConfig":"44"},{"size":4136,"mtime":1635575447174,"results":"70","hashOfConfig":"44"},{"size":893,"mtime":1635575447186,"results":"71","hashOfConfig":"44"},{"size":2122,"mtime":1635575447184,"results":"72","hashOfConfig":"44"},{"size":3169,"mtime":1640439811085,"results":"73","hashOfConfig":"44"},{"size":5274,"mtime":1637612986468,"results":"74","hashOfConfig":"44"},{"size":542,"mtime":1635575447158,"results":"75","hashOfConfig":"44"},{"size":7612,"mtime":1635575447157,"results":"76","hashOfConfig":"44"},{"size":5300,"mtime":1640439588219,"results":"77","hashOfConfig":"44"},{"size":4632,"mtime":1640180556600,"results":"78","hashOfConfig":"44"},{"size":6531,"mtime":1635575447172,"results":"79","hashOfConfig":"44"},{"size":4171,"mtime":1639138428593,"results":"80","hashOfConfig":"44"},{"size":4497,"mtime":1637612986468,"results":"81","hashOfConfig":"44"},{"size":321,"mtime":1635575447161,"results":"82","hashOfConfig":"44"},{"size":3019,"mtime":1639138837870,"results":"83","hashOfConfig":"44"},{"size":2071,"mtime":1639138317318,"results":"84","hashOfConfig":"44"},{"size":440,"mtime":1636312992066,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"tn93fm",{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"111"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"111"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shriramchenniappa/Desktop/personal/RL_app/src/reportWebVitals.js",[],["197","198"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/sagas/index.js",["199"],"import { all, fork } from \"redux-saga/effects\";\n\n// Sagas\n// import adminSaga from \"./admin.saga\";\n\n// Connect types to sagas\nexport const rootSaga = function* root() {\n  yield all([\n    // fork(adminSaga)\n  ]);\n};\n",["200","201"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/DatabaseUpdater/index.js",["202","203"],"import { BreakActions, PastActions } from \"../../redux/actions\";\nimport { store } from \"../../redux\";\nimport { AWClientService } from \"../../services\";\nimport axios from \"axios\";\nlet client = new AWClientService();\n\n//TO-DO: Modify functions according to which data to backup. Currenly backing up active windows\n\n//updates the local database with data from activity watch, and adds a minute of runnning time to THIS APP for use for interval-break\nexport default function updateDatabase() {\n  // client.getActiveWindowsSinceBeginning().then((dat) => {\n  //   let back = {\n  //     type: \"active-windows\",\n  //     data: dat,\n  //   }\n  //   store.dispatch(PastActions.backupAWData(back))\n  // })\n\n  //Also backing up today's total screen time per app, although unnecessary\n  client.getAppTotals().then(async (dat) => {\n    let all = dat.appTotal;\n    let web = dat.websiteTotals;\n    let complete = false;\n    \n    let i = 0;\n    while (!complete) {\n      let finAll = [];\n      let finWeb = [];\n      let start = false;\n      if (all[i]) {\n        finAll = all.slice(i, i + 50);\n      } \n      if (web[i]) {\n        finWeb = web.slice(i, i + 50);\n      } \n      if (i === 0) {\n        start = true;\n      }\n      let today = new Date();\n      today.setHours(0, 0, 0, 0);\n      let tomorrow = new Date();\n      tomorrow.setHours(23, 59, 59, 999);\n      let body = {\n        user: store.getState().onboarding.user._id,\n        appTotal: finAll,\n        websiteTotals: finWeb,\n        start,\n        today: today,\n        tomorrow: tomorrow,\n        timestamp: new Date(),\n      };\n      let response = await axios.post(\n        \"https://thepallab.com/api/user/aw\",\n        body\n      );\n      i += 50;\n      if (!all[i] && !web[i]) {\n        complete = true;\n      }\n    }\n\n    // console.log(\"data\", dat);\n    // let back = {\n    //   type: \"screen-time\",\n    //   data: dat,\n    // }\n    //\n  });\n\n  //adding a minute of running time\n  store.dispatch(PastActions.addMinute());\n}\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/EditScheduledBreaks/index.jsx",["204","205"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { TimePicker, Select, Button } from \"antd\";\nimport moment from \"moment\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport { OnboardingActions } from \"../../redux/actions\";\n\nimport \"./styles.css\";\n\nconst { Option } = Select;\n\nconst EditScheduledBreakScreen = (props) => {\n  const history = useHistory();\n  return (\n    <div className=\"step-container\" style={{ padding: \"5%\" }}>\n      <h1>Scheduled Breaks</h1>\n\n      <div style={{ marginTop: \"4%\" }}>\n        <p style={{ fontSize: \"17px\" }}>\n          Are there any breaks you would like to schedule on a regular basis?\n        </p>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          width: \"50%\",\n        }}\n      >\n        <p style={{ flex: 1 }}>Day</p>\n        <p style={{ flex: 1 }}>Start Time</p>\n        <p style={{ flex: 1 }}>End Time</p>\n      </div>\n      <div>\n        {props.onboarding.tempScheduledBreaks.map((item, index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                width: \"50%\",\n                marginTop: index !== 0 ? \"1%\" : \"0%\",\n              }}\n            >\n              <Select\n                style={{ flex: 1 }}\n                placeholder=\"Select a day\"\n                onChange={(value) => {\n                  const tempObject = item;\n                  tempObject.day = value;\n                  const tempArray = props.onboarding.tempScheduledBreaks;\n                  tempArray[index] = tempObject;\n                  props.addTempSched(tempArray);\n                }}\n                defaultValue={item.day.length !== 0 ? item.day : null}\n              >\n                <Option value=\"monday\">Monday</Option>\n                <Option value=\"tuesday\">Tuesday</Option>\n                <Option value=\"wednesday\">Wednesday</Option>\n                <Option value=\"thursday\">Thursday</Option>\n                <Option value=\"friday\">Friday</Option>\n                <Option value=\"saturday\">Saturday</Option>\n                <Option value=\"sunday\">Sunday</Option>\n              </Select>\n              <TimePicker\n                format={\"HH:mm\"}\n                style={{ flex: 1 }}\n                value={item.start.length !== 0 ? moment(item.start) : null}\n                onChange={(e) => {\n                  const time = e.toString();\n                  const tempObject = item;\n                  tempObject.start = time;\n                  const tempArray = props.onboarding.tempScheduledBreaks;\n                  tempArray[index] = tempObject;\n                  props.addTempSched(tempArray);\n                }}\n                onSelect={(e) => {\n                  const time = e.toString();\n                  const tempObject = item;\n                  tempObject.start = time;\n                  const tempArray = props.onboarding.tempScheduledBreaks;\n                  tempArray[index] = tempObject;\n                  props.addTempSched(tempArray);\n                }}\n              />\n              <TimePicker\n                format={\"HH:mm\"}\n                style={{ flex: 1 }}\n                value={item.end.length !== 0 ? moment(item.end) : null}\n                onChange={(e) => {\n                  const time = e.toString();\n                  const tempObject = item;\n                  tempObject.end = time;\n                  const tempArray = props.onboarding.tempScheduledBreaks;\n                  tempArray[index] = tempObject;\n                  props.addTempSched(tempArray);\n                }}\n                onSelect={(e) => {\n                  const time = e.toString();\n                  const tempObject = item;\n                  tempObject.end = time;\n                  const tempArray = props.onboarding.tempScheduledBreaks;\n                  tempArray[index] = tempObject;\n                  props.addTempSched(tempArray);\n                }}\n              />\n            </div>\n          );\n        })}\n      </div>\n\n      <p\n        style={{\n          textDecorationLine: \"underline\",\n          marginTop: \"2%\",\n          fontSize: \"17px\",\n          cursor: \"pointer\",\n          width: \"15%\",\n        }}\n        onClick={() => {\n          let tempArray = props.onboarding.tempScheduledBreaks;\n          tempArray.push({ start: \"\", end: \"\", day: \"\" });\n          props.addTempSched(tempArray);\n        }}\n      >\n        +Add a Break\n      </p>\n      <Button\n        onClick={() => {\n          history.push(\"/home\");\n        }}\n      >\n        Cancel\n      </Button>\n      <Button\n        onClick={async () => {\n          let body = {\n            scheduledBreaks: props.onboarding.tempScheduledBreaks,\n            user: props.onboarding.user._id,\n          };\n          let response = await axios.post(\n            \"https://thepallab.com/api/user/update-onb\",\n            body\n          );\n          if (response.data.message === \"Successful Update\") {\n            props.setScheduledBreaks(props.onboarding.tempScheduledBreaks);\n            history.push(\"/home\");\n          }\n        }}\n      >\n        Update Scheduled Breaks\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { onboarding: state.onboarding };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      setScheduledBreaks: OnboardingActions.setScheduledBreaks,\n      addTempSched: OnboardingActions.addTempSched,\n      setScreenTime: OnboardingActions.setScreenTime,\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditScheduledBreakScreen);\n",["206","207"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/activityrule.break.js",["208"],"import { BreakActions, PastActions } from \"../../redux/actions\";\nimport { store } from \"../../redux\";\nimport { AWClientService } from \"../../services\";\nimport psl from \"psl\";\nlet client = new AWClientService();\n\n//TO DO: CONNECT WITH ACTUAL USER SETTINGS. Currently hardcoded for Facebook continuous usage above 20 seconds\n//TO DO: SIMILAR CHECK FOR CUMULATIVE USAGE\n\n//checks whether activity rule break is to be triggered\nexport default function checkActivityRuleBreak() {\n  client\n    .getAppTotals()\n    .then((allValues) => {\n      let onboardingProps = store.getState().onboarding;\n      const activityBreaks = onboardingProps.allOverRides;\n      const websiteTotals = allValues.websiteTotals;\n      const websiteTotalsUnmerged = allValues.websiteTotalsUnmerged;\n      for (let indBreak of activityBreaks) {\n        if (indBreak.url.length > 0) {\n          let totalUsage = 0;\n          let tempUrl = indBreak.url.replace(/^\\/\\/|^.*?:(\\/\\/)?/, \"\");\n          tempUrl = tempUrl.replace(/\\/+$/, \"\");\n          let parsed = psl.parse(tempUrl);\n          let siteName = parsed.sld;\n          if (siteName === \"google\" && parsed.subdomain !== \"www\") {\n            siteName = parsed.subdomain;\n          }\n          let preGame = Math.ceil(totalUsage / (60 * indBreak.interval));\n          let initScheduled = store.getState().past.initScheduled;\n          let today = store.getState().past.initScheduled;\n          if (today.length === 0) {\n            today = new Date();\n            store.dispatch(PastActions.setToday(today.toISOString()));\n          } else {\n            today = new Date(today);\n          }\n          if (\n            today.getDate() !== new Date().getDate() ||\n            today.getMonth() !== new Date().getMonth()\n          ) {\n            today = new Date();\n            store.dispatch(PastActions.setToday(today.toISOString()));\n          } else {\n            initScheduled[indBreak.url] = preGame;\n          }\n          if (initScheduled[indBreak.url]) {\n            preGame = initScheduled[indBreak.url];\n          }\n\n          initScheduled[indBreak.url] = preGame;\n          store.dispatch(PastActions.saveInitBreakData(initScheduled));\n          if (indBreak.cumulative) {\n            websiteTotals.map((ob, index) => {\n              if (\n                siteName.length > 0 &&\n                ob.data.url.includes(siteName) &&\n                !(store.getState().break.breakState === \"break\") &&\n                !(store.getState().break.breakState === \"break-feedback\") &&\n                !(store.getState().break.breakState === \"break-popup\") &&\n                !(store.getState().break.breakState === \"break-stroop\") &&\n                !(store.getState().break.breakState === \"break-fruit\") &&\n                !(store.getState().break.breakState === \"cancel-break\") &&\n                !(store.getState().break.breakState === \"pre-break-feedback\")\n              ) {\n                totalUsage = totalUsage + ob.duration;\n              }\n            });\n\n            if (preGame === 0) {\n              if (totalUsage / 60 > indBreak.interval && totalUsage > 0) {\n                initScheduled[indBreak.url] += 1;\n\n                store.dispatch(PastActions.saveInitBreakData(initScheduled));\n                let timeNow = new Date().toISOString();\n\n                let breakData = {\n                  breakType: \"activity-rule (continuous)\",\n                  breakDescription: indBreak.name,\n                  breakDuration: indBreak.breakLength * 60,\n                  breakStartTime: timeNow,\n                };\n                store.dispatch(BreakActions.startPopup(timeNow, breakData));\n                setTimeout(() => {\n                  if (\n                    store.getState().break.breakState === \"break-popup\" &&\n                    store.getState().break.popupStartTime === timeNow\n                  ) {\n                    store.dispatch(BreakActions.startPrebreakfeedback());\n                  }\n                }, 10000);\n              }\n            } else {\n              if (\n                totalUsage / 60 > indBreak.interval * preGame &&\n                totalUsage > 0\n              ) {\n                initScheduled[indBreak.url] += 1;\n\n                store.dispatch(PastActions.saveInitBreakData(initScheduled));\n                let timeNow = new Date().toISOString();\n\n                let breakData = {\n                  breakType: \"activity-rule (cumulative)\",\n                  breakDescription: indBreak.name,\n                  breakDuration: indBreak.breakLength * 60,\n                  breakStartTime: timeNow,\n                };\n                store.dispatch(BreakActions.startPopup(timeNow, breakData));\n                setTimeout(() => {\n                  if (\n                    store.getState().break.breakState === \"break-popup\" &&\n                    store.getState().break.popupStartTime === timeNow\n                  ) {\n                    store.dispatch(BreakActions.startPrebreakfeedback());\n                  }\n                }, 10000);\n              }\n            }\n          } else {\n            let lastVal =\n              websiteTotalsUnmerged[websiteTotalsUnmerged.length - 1];\n            if (lastVal.data.url.includes(siteName)) {\n              for (let i = websiteTotalsUnmerged.length - 1; i > 0; i--) {\n                if (\n                  siteName.length > 0 &&\n                  websiteTotalsUnmerged[i].data.url.includes(siteName) &&\n                  !(store.getState().break.breakState === \"break\") &&\n                  !(store.getState().break.breakState === \"break-feedback\") &&\n                  !(store.getState().break.breakState === \"break-popup\") &&\n                  !(store.getState().break.breakState === \"break-stroop\") &&\n                  !(store.getState().break.breakState === \"break-fruit\") &&\n                  !(store.getState().break.breakState === \"cancel-break\") &&\n                  !(store.getState().break.breakState === \"pre-break-feedback\")\n                ) {\n                  totalUsage = totalUsage + websiteTotalsUnmerged[i].duration;\n                } else {\n                  break;\n                }\n              }\n              if (lastVal.id !== store.getState().past.takenId) {\n                if (totalUsage / 60 > indBreak.interval && totalUsage > 0) {\n                  initScheduled[indBreak.url] += 1;\n\n                  store.dispatch(PastActions.saveInitBreakData(initScheduled));\n                  let timeNow = new Date().toISOString();\n\n                  let breakData = {\n                    breakType: \"activity-rule (non-cumulative)\",\n                    breakDescription: indBreak.name,\n                    breakDuration: indBreak.breakLength * 60,\n                    breakStartTime: timeNow,\n                  };\n                  store.dispatch(BreakActions.startPopup(timeNow, breakData));\n                  store.dispatch(PastActions.setTakenId(lastVal.id));\n                  setTimeout(() => {\n                    if (\n                      store.getState().break.breakState === \"break-popup\" &&\n                      store.getState().break.popupStartTime === timeNow\n                    ) {\n                      store.dispatch(BreakActions.startPrebreakfeedback());\n                    }\n                  }, 10000);\n                }\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(console.log);\n}\n",["209","210"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/services/awclient.service.js",["211","212","213","214","215"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Games/stroop_test/index.jsx",["216","217","218","219","220","221","222","223","224","225"],"import React from \"react\";\nimport Stroop from \"@orcatech/react-neuropsych-stroop\";\nimport { useState, useEffect } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction StroopTest(props) {\n  const [count, setCount] = useState({\n    total: 0,\n    score: {\n      times: [],\n      score: 0,\n    },\n    lastResult: \"\",\n    words: [],\n    colors: [],\n  });\n\n  useEffect(() => {\n    let tempcount = { ...count };\n    let now = new Date();\n    tempcount.score.times.push(now);\n    setCount(tempcount);\n  }, []);\n\n  if (count.colors.length == 0) {\n    var words = [\n      \"purple\",\n      \"black\",\n      \"green\",\n      \"red\",\n      \"blue\",\n      \"orange\",\n      \"pink\",\n      \"yellow\",\n    ];\n    var words2 = [...words];\n    var colors = [\n      \"9370D8\",\n      \"000000\",\n      \"009900\",\n      \"ff0000\",\n      \"000099\",\n      \"EE7600\",\n      \"FF69B4\",\n      \"FFFF00\",\n    ];\n    var colors2 = [...colors];\n\n    words2 = words.slice(0, props.len || 4);\n    colors2 = colors.slice(0, props.len || 4);\n\n    words = [...words2];\n    colors = [...colors];\n\n    shuffleArray(words2);\n    colors2 = [];\n    words2.forEach((word) => {\n      colors2.push(colors[words.indexOf(word)]);\n    });\n\n    setCount({ ...count, words: words2, colors: colors2 });\n  }\n\n  var words = count.words;\n  var colors = count.colors;\n\n  const combos = [\n    {\n      word: Math.floor(Math.random() * words.length),\n      color: Math.floor(Math.random() * words.length),\n    },\n  ];\n\n  var onComplete = (data) => {\n    // handle test completion\n    const { errors, successes, begin, finish, timeLimitReached } = data;\n    //setCount({ ...count, total: count.total + 1 })\n  };\n\n  var onSuccess = (data) => {\n    let tempcount = { ...count };\n    let now = new Date();\n    tempcount.score.times.push(now);\n    tempcount.score.score = tempcount.score.score + 1;\n    setCount({\n      ...count,\n      total: count.total + 1,\n      score: tempcount.score,\n      lastResult: \"Correct!\",\n    });\n    // handle each success that occurs\n  };\n\n  var onError = (data) => {\n    let tempcount = { ...count };\n    let now = new Date();\n    tempcount.score.times.push(now);\n    setCount({\n      ...count,\n      total: count.total + 1,\n      score: tempcount.score,\n      lastResult: \"Wrong!\",\n    });\n    // handle each error that occurs\n  };\n  if (count.total == 3) {\n    props.onComplete(count.score);\n    return <>Test completed. The score is {count.score.score}</>;\n  }\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n      key={count.total}\n    >\n      <div>Question {count.total + 1}</div>\n      <CountdownCircleTimer\n        onComplete={() => {\n          setCount({\n            ...count,\n            total: count.total + 1,\n            lastResult: \"Out of time!\",\n          });\n        }}\n        isPlaying\n        duration={10}\n        size={100}\n        colors=\"#000000\"\n        strokeWidth={6}\n      >\n        {({ remainingTime }) => remainingTime}\n      </CountdownCircleTimer>\n\n      <Stroop\n        buttonsPerRow={words.length / 2}\n        colors={colors}\n        combos={combos}\n        onComplete={onComplete}\n        onError={onError}\n        onSuccess={onSuccess}\n        words={words}\n        incorrectMessage=\"Incorrect!\"\n        completionMessage=\"Out of time!\"\n        timeLimit={30000}\n      />\n      <div>{count.lastResult}</div>\n      <div>{count.score.score}</div>\n    </div>\n  );\n}\n\nexport default StroopTest;\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/index.js",[],["226","227"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/reducers/index.js",["228"],"import { combineReducers, Reducer } from \"redux\";\nimport TestReducer from \"./test.reducer\";\nimport OnboardingReducer from \"./onboarding.reducer\";\nimport BreakReducer from \"./break.reducer\";\nimport PastReducer from \"./past.reducer\";\n\n\nconst allReducers = {\n  onboarding: OnboardingReducer,\n  test: TestReducer,\n  break: BreakReducer,\n  past: PastReducer,\n};\n\nconst rootReducer = combineReducers({ ...allReducers });\n\nexport default rootReducer;\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/EventHandler/index.js",["229","230"],"import { BreakActions, PastActions } from \"../../redux/actions\";\nimport { store } from \"../../redux\";\nvar electron = window.require(\"electron\");\nvar curWindow = electron.remote.getCurrentWindow();\nconst isDev = window.require(\"electron-is-dev\");\nconst path = window.require(\"path\");\n\n//handles window and route changes when break-state changes\nexport default function eventHandler(history) {\n  //sets screen back to normal if no break\n  if (\n    store.getState().break.breakState === \"no-break\" &&\n    !store.getState().break.windowChanged\n  ) {\n    curWindow.setOpacity(1);\n    curWindow.unmaximize();\n    curWindow.setSize(1400, 800);\n    curWindow.minimize();\n    history.push(\"/\");\n    store.dispatch(BreakActions.setWindowChanged());\n    curWindow.setVisibleOnAllWorkspaces(true, {visibleOnFullScreen: true});\n    curWindow.setAlwaysOnTop(false);\n    curWindow.reload();\n  }\n\n  //sets screen to popup window size if break-popup\n  else if (\n    store.getState().break.breakState === \"break-popup\" &&\n    !store.getState().break.windowChanged\n  ) {\n    curWindow.setVisibleOnAllWorkspaces(true, {visibleOnFullScreen: true});\n    curWindow.setAlwaysOnTop(true, \"pop-up-menu\");\n    curWindow.restore();\n    history.push(\"/popup\");\n    //curWindow.maximize()\n    curWindow.unmaximize();\n    curWindow.setSize(1000, 800);\n    curWindow.center();\n\n    store.dispatch(BreakActions.setWindowChanged());\n  } else if (store.getState().break.breakState === \"pre-break-feedback\") {\n    history.push(\"/prefeedback\");\n    curWindow.center();\n  } else if (store.getState().break.breakState === \"break-stroop\") {\n    history.push(\"/stroop\");\n    curWindow.center();\n  } else if (store.getState().break.breakState === \"break-fruit\") {\n    curWindow.unmaximize();\n    curWindow.setSize(1000, 800);\n    curWindow.setOpacity(1);\n    curWindow.center();\n\n    curWindow.setMovable(true);\n    history.push(\"/fruit\");\n  } else if (store.getState().break.breakState === \"break-feedback\") {\n    curWindow.maximize();\n    curWindow.setVisibleOnAllWorkspaces(true, {visibleOnFullScreen: true});\n    curWindow.setAlwaysOnTop(false);\n    history.push(\"/feedback\");\n  }\n  else if (store.getState().break.breakState === \"cancel-break\") {\n    curWindow.setVisibleOnAllWorkspaces(true, {visibleOnFullScreen: true});\n    curWindow.setAlwaysOnTop(false);\n  }\n\n  //sets window to full screen if break, and also ends the break after break time is over\n  else if (\n    store.getState().break.breakState === \"break\" &&\n    !store.getState().break.windowChanged\n  ) {\n    curWindow.setOpacity(0.8);\n    curWindow.maximize();\n    curWindow.setAlwaysOnTop(true);\n\n    history.push(\"/break\");\n    store.dispatch(BreakActions.setWindowChanged());\n    let s1 = store.getState().break.breakStartTime;\n    setTimeout(() => {\n      if (\n        store.getState().break.breakState === \"break\" &&\n        s1 === store.getState().break.breakStartTime\n      ) {\n        store.dispatch(BreakActions.startFruit());\n      }\n    }, store.getState().break.breakDuration * 1000);\n  } else if (store.getState().onboarding.weeklyRem) {\n    curWindow.restore();\n    history.push(\"/weekpop\");\n    //curWindow.maximize()\n    curWindow.unmaximize();\n    curWindow.setSize(1000, 800);\n    curWindow.center();\n    setTimeout(() => {\n      store.dispatch(PastActions.setWeeklyRem(false));\n      history.push(\"/home\");\n    }, 60000);\n  }\n}\n",["231","232"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/EditRegularBreaksScreen/index.jsx",["233","234"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Input, Button } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport { OnboardingActions } from \"../../redux/actions\";\n\nimport \"./styles.css\";\n\nconst EditRegularBreakScreen = (props) => {\n  const history = useHistory();\n  return (\n    <div className=\"step-container\" style={{ padding: \"5%\" }}>\n      <h1>Regular Breaks</h1>\n      <div style={{ marginTop: \"3%\" }}>\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\n          How often would you like to take regular breaks?\n        </p>\n        <div\n          style={{\n            marginTop: \"1%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n          }}\n        >\n          <Input\n            size=\"large\"\n            style={{ width: \"10%\", borderRadius: 5, verticalAlign: \"center\" }}\n            placeholder=\"Interval\"\n            type=\"number\"\n            value={props.onboarding.tempRegularBreakInterval.toString()}\n            onChange={(e) => {\n              props.addTempReg(\n                props.onboarding.tempRegularBreakLength,\n                parseInt(e.target.value)\n              );\n            }}\n          />\n          <p style={{ marginTop: \"1%\", marginLeft: \"1%\", fontSize: \"15px\" }}>\n            hour(s)\n          </p>\n        </div>\n      </div>\n      <div style={{ marginTop: \"3%\" }}>\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\n          How long would you like your breaks to be?\n        </p>\n        <div\n          style={{\n            marginTop: \"1%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n          }}\n        >\n          <Input\n            size=\"large\"\n            style={{ width: \"10%\", borderRadius: 5, verticalAlign: \"center\" }}\n            placeholder=\"Length\"\n            type=\"number\"\n            value={props.onboarding.tempRegularBreakLength.toString()}\n            onChange={(e) => {\n              if (e.target.value > 0)\n                props.addTempReg(\n                  parseInt(e.target.value),\n                  props.onboarding.tempRegularBreakInterval\n                );\n            }}\n          />\n          <p style={{ marginTop: \"1%\", marginLeft: \"1%\", fontSize: \"15px\" }}>\n            minutes\n          </p>\n        </div>\n      </div>\n      <div>\n        <p>\n          You will get a break every{\" \"}\n          {props.onboarding.tempRegularBreakInterval.toString()} hour(s) for a\n          duration of {props.onboarding.tempRegularBreakLength.toString()} minutes.\n        </p>\n      </div>\n\n      <Button\n        onClick={() => {\n          history.push(\"/home\");\n        }}\n      >\n        Cancel\n      </Button>\n      <Button\n        onClick={async () => {\n          let body = {\n            regularBreakLength: props.onboarding.tempRegularBreakLength,\n            regularBreakInterval: props.onboarding.tempRegularBreakInterval,\n            user: props.onboarding.user._id,\n          };\n          let response = await axios.post(\n            \"https://thepallab.com/api/user/update-onb\",\n            body\n          );\n          if (response.data.message === \"Successful Update\") {\n            props.setRegularBreakInterval(\n              props.onboarding.tempRegularBreakInterval\n            );\n            props.setRegularBreakLength(\n              props.onboarding.tempRegularBreakLength\n            );\n            history.push(\"/home\");\n          }\n        }}\n      >\n        Update Regular Breaks\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { onboarding: state.onboarding };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      setRegularBreakInterval: OnboardingActions.setRegularBreakInterval,\n      setRegularBreakLength: OnboardingActions.setRegularBreakLength,\n      addTempReg: OnboardingActions.addTempReg,\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditRegularBreakScreen);\n",["235","236"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/WeeklyForm/index.jsx",["237","238","239","240","241"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/interval.break.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/RegularBreaks.jsx",["242","243"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/types/break.types.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/actions/index.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/NewHomeScreen/index.jsx",["244","245","246","247","248"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/scheduled.break.js",["249"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/AdHocBreaks.jsx",["250","251","252","253","254"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/utils/dates.js",["255","256","257","258","259"],"import * as dates from 'date-arithmetic'\n\nexport {\n  milliseconds,\n  seconds,\n  minutes,\n  hours,\n  month,\n  startOf,\n  endOf,\n  add,\n  eq,\n  gte,\n  gt,\n  lte,\n  lt,\n  inRange,\n  min,\n  max,\n} from 'date-arithmetic'\n\nconst MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n}\n\nconst MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nexport function monthsInYear(year) {\n  let date = new Date(year, 0, 1)\n\n  return MONTHS.map(i => dates.month(date, i))\n}\n\nexport function firstVisibleDay(date, localizer) {\n  let firstOfMonth = dates.startOf(date, 'month')\n\n  return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek())\n}\n\nexport function lastVisibleDay(date, localizer) {\n  let endOfMonth = dates.endOf(date, 'month')\n\n  return dates.endOf(endOfMonth, 'week', localizer.startOfWeek())\n}\n\nexport function visibleDays(date, localizer) {\n  let current = firstVisibleDay(date, localizer),\n    last = lastVisibleDay(date, localizer),\n    days = []\n\n  while (dates.lte(current, last, 'day')) {\n    days.push(current)\n    current = dates.add(current, 1, 'day')\n  }\n\n  return days\n}\n\nexport function ceil(date, unit) {\n  let floor = dates.startOf(date, unit)\n\n  return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit)\n}\n\nexport function range(start, end, unit = 'day') {\n  let current = start,\n    days = []\n\n  while (dates.lte(current, end, unit)) {\n    days.push(current)\n    current = dates.add(current, 1, unit)\n  }\n\n  return days\n}\n\nexport function merge(date, time) {\n  if (time == null && date == null) return null\n\n  if (time == null) time = new Date()\n  if (date == null) date = new Date()\n\n  date = dates.startOf(date, 'day')\n  date = dates.hours(date, dates.hours(time))\n  date = dates.minutes(date, dates.minutes(time))\n  date = dates.seconds(date, dates.seconds(time))\n  return dates.milliseconds(date, dates.milliseconds(time))\n}\n\nexport function eqTime(dateA, dateB) {\n  return (\n    dates.hours(dateA) === dates.hours(dateB) &&\n    dates.minutes(dateA) === dates.minutes(dateB) &&\n    dates.seconds(dateA) === dates.seconds(dateB)\n  )\n}\n\nexport function isJustDate(date) {\n  return (\n    dates.hours(date) === 0 &&\n    dates.minutes(date) === 0 &&\n    dates.seconds(date) === 0 &&\n    dates.milliseconds(date) === 0\n  )\n}\n\nexport function duration(start, end, unit, firstOfWeek) {\n  if (unit === 'day') unit = 'date'\n  return Math.abs(\n    dates[unit](start, undefined, firstOfWeek) -\n      dates[unit](end, undefined, firstOfWeek)\n  )\n}\n\nexport function diff(dateA, dateB, unit) {\n  if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB)\n\n  // the .round() handles an edge case\n  // with DST where the total won't be exact\n  // since one day in the range may be shorter/longer by an hour\n  return Math.round(\n    Math.abs(\n      +dates.startOf(dateA, unit) / MILLI[unit] -\n        +dates.startOf(dateB, unit) / MILLI[unit]\n    )\n  )\n}\n\nexport function total(date, unit) {\n  let ms = date.getTime(),\n    div = 1\n\n  switch (unit) {\n    case 'week':\n      div *= 7\n    case 'day':\n      div *= 24\n    case 'hours':\n      div *= 60\n    case 'minutes':\n      div *= 60\n    case 'seconds':\n      div *= 1000\n  }\n\n  return ms / div\n}\n\nexport function week(date) {\n  var d = new Date(date)\n  d.setHours(0, 0, 0)\n  d.setDate(d.getDate() + 4 - (d.getDay() || 7))\n  return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7)\n}\n\nexport function today() {\n  return dates.startOf(new Date(), 'day')\n}\n\nexport function yesterday() {\n  return dates.add(dates.startOf(new Date(), 'day'), -1, 'day')\n}\n\nexport function tomorrow() {\n  return dates.add(dates.startOf(new Date(), 'day'), 1, 'day')\n}",["260","261"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/breakmanager/Checker/index.js",[],["262","263"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/BreakFeedbackScreen/index.jsx",["264","265","266","267","268","269","270","271","272","273"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/reducers/break.reducer.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/services/index.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/App.js",["274","275"],"import React, { useEffect } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter, useHistory } from \"react-router-dom\";\nimport BreakManager from \"./breakmanager\";\n\n\nimport { store } from \"./redux\";\nimport Main from \"./navigation\";\n\nimport \"antd/dist/antd.css\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nfunction App() {\n  let history = useHistory();\n  useEffect(() => {\n    \n  }, []);\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <Main />\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/index.jsx",["276","277"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Steps, Button } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport PersonalInformationScreen from \"./PersonalInformation\";\nimport ScheduledBreakScreen from \"./ScheduledBreaks\";\nimport RegularBreakScreen from \"./RegularBreaks\";\nimport AdHocBreakScreen from \"./AdHocBreaks\";\nimport FinishingUpScreen from \"./FinishingUp\";\nimport { OnboardingActions } from \"../../redux/actions\";\nimport \"./styles.css\";\nimport { setOnboardingComplete } from \"../../redux/actions/onboarding.action\";\nimport BreakManager from \"../../breakmanager\";\n\nconst { Step } = Steps;\n\nconst OnboardingScreen = (props) => {\n  const [current, setCurrent] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [blocked, setBlocked] = useState([\"\", true]);\n  const history = useHistory();\n\n  const addOnbInfo = async () => {\n    // history.push(\"/home\");\n    // BreakManager(history);\n    let body = { ...props.onboarding };\n    if (props.onboarding.user && props.onboarding.user._id) {\n      body.user = props.onboarding.user._id;\n      body.timestamp = new Date();\n      let response = await axios.post(\n        \"https://thepallab.com/api/user/onb\",\n        body\n      );\n      if (response.data.message === \"Successful Added\") {\n        history.push(\"/home\");\n        BreakManager(history);\n      }\n    } else {\n      history.push(\"/login\");\n    }\n  };\n\n  const checkStart = async () => {\n    let response = await axios.get(\"https://thepallab.com/api/user/getstate\");\n    let startInfo = response.data.link;\n    setBlocked(startInfo.link);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (props.onboarding.complete) {\n      history.push(\"/home\");\n    } else if (\n      props.onboarding.user &&\n      Object.keys(props.onboarding.user).length === 0\n    ) {\n      history.push(\"/login\");\n    } else if (!props.onboarding.awChecked) {\n      history.push(\"/aw\");\n    } else {\n      checkStart();\n    }\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"main\">\n        <p>Loading Information...</p>\n      </div>\n    );\n  } else if (blocked[1]) {\n    return (\n      <div\n        className=\"main\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <h2 style={{ textAlign: \"center\" }}>\n          Thank you for signing up! we appreciate your interest in our\n          experiment. You can start using this app on the {blocked[0]}\n        </h2>\n        <Button\n          onClick={() => {\n            setLoading(true);\n            checkStart();\n          }}\n        >\n          Refresh\n        </Button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"main\">\n        {props.onboarding.user.type === \"0\" && (\n          <Steps current={current} labelPlacement=\"vertical\">\n            <Step title=\"PERSONAL INFORMATION\" />\n            <Step title=\"SCHEDULED BREAKS\" />\n            <Step title=\"INTERVAL BASED BREAKS\" />\n            <Step title=\"ACTIVITY BASED BREAKS\" />\n            <Step title=\"FINISHING UP\" />\n          </Steps>\n        )}\n        {props.onboarding.user.type === \"1\" && (\n          <Steps current={current} labelPlacement=\"vertical\">\n            <Step title=\"PERSONAL INFORMATION\" />\n            <Step title=\"SCHEDULED BREAKS\" />\n            <Step title=\"FINISHING UP\" />\n          </Steps>\n        )}\n        {props.onboarding.user.type === \"2\" && (\n          <Steps current={current} labelPlacement=\"vertical\">\n            <Step title=\"PERSONAL INFORMATION\" />\n            <Step title=\"INTERVAL BASED BREAKS\" />\n            <Step title=\"FINISHING UP\" />\n          </Steps>\n        )}\n        {props.onboarding.user.type === \"3\" && (\n          <Steps current={current} labelPlacement=\"vertical\">\n            <Step title=\"PERSONAL INFORMATION\" />\n            <Step title=\"ACTIVITY BASED BREAKS\" />\n            <Step title=\"FINISHING UP\" />\n          </Steps>\n        )}\n        {props.onboarding.user.type === \"4\" && (\n          <Steps current={current} labelPlacement=\"vertical\">\n            <Step title=\"PERSONAL INFORMATION\" />\n            <Step title=\"FINISHING UP\" />\n          </Steps>\n        )}\n\n        {props.onboarding.user.type === \"0\" && (\n          <div>\n            {current === 0 && <PersonalInformationScreen />}\n            {current === 1 && <ScheduledBreakScreen />}\n            {current === 2 && <RegularBreakScreen />}\n            {current === 3 && <AdHocBreakScreen />}\n            {current === 4 && <FinishingUpScreen />}\n          </div>\n        )}\n        {props.onboarding.user.type === \"1\" && (\n          <div>\n            {current === 0 && <PersonalInformationScreen />}\n            {current === 1 && <ScheduledBreakScreen />}\n            {current === 2 && <FinishingUpScreen />}\n          </div>\n        )}\n        {props.onboarding.user.type === \"2\" && (\n          <div>\n            {current === 0 && <PersonalInformationScreen />}\n            {current === 1 && <RegularBreakScreen />}\n            {current === 2 && <FinishingUpScreen />}\n          </div>\n        )}\n        {props.onboarding.user.type === \"3\" && (\n          <div>\n            {current === 0 && <PersonalInformationScreen />}\n            {current === 1 && <AdHocBreakScreen />}\n            {current === 2 && <FinishingUpScreen />}\n          </div>\n        )}\n        {props.onboarding.user.type === \"4\" && (\n          <div>\n            {current === 0 && <PersonalInformationScreen />}\n            {current === 1 && <FinishingUpScreen />}\n          </div>\n        )}\n        {props.onboarding.user.type === \"0\" && (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {current > 0 && (\n              <Button\n                style={{ margin: \"0 8px\" }}\n                onClick={() => {\n                  setCurrent(current - 1);\n                }}\n              >\n                Back\n              </Button>\n            )}\n            {current < 4 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  setCurrent(current + 1);\n                }}\n              >\n                Next\n              </Button>\n            )}\n            {current === 4 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  props.setOnboardingComplete();\n                  // curWindow.minimize();\n                  addOnbInfo();\n                  // history.push(\"/home\");\n                }}\n              >\n                Done\n              </Button>\n            )}\n          </div>\n        )}\n        {props.onboarding.user.type === \"1\" && (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {current > 0 && (\n              <Button\n                style={{ margin: \"0 8px\" }}\n                onClick={() => {\n                  setCurrent(current - 1);\n                }}\n              >\n                Back\n              </Button>\n            )}\n            {current < 2 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  setCurrent(current + 1);\n                }}\n              >\n                Next\n              </Button>\n            )}\n            {current === 2 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  props.setOnboardingComplete();\n                  // curWindow.minimize();\n                  addOnbInfo();\n                  // history.push(\"/home\");\n                }}\n              >\n                Done\n              </Button>\n            )}\n          </div>\n        )}\n        {props.onboarding.user.type === \"2\" && (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {current > 0 && (\n              <Button\n                style={{ margin: \"0 8px\" }}\n                onClick={() => {\n                  setCurrent(current - 1);\n                }}\n              >\n                Back\n              </Button>\n            )}\n            {current < 2 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  setCurrent(current + 1);\n                }}\n              >\n                Next\n              </Button>\n            )}\n            {current === 2 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  props.setOnboardingComplete();\n                  // curWindow.minimize();\n                  addOnbInfo();\n                  // history.push(\"/home\");\n                }}\n              >\n                Done\n              </Button>\n            )}\n          </div>\n        )}\n        {props.onboarding.user.type === \"3\" && (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {current > 0 && (\n              <Button\n                style={{ margin: \"0 8px\" }}\n                onClick={() => {\n                  setCurrent(current - 1);\n                }}\n              >\n                Back\n              </Button>\n            )}\n            {current < 2 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  setCurrent(current + 1);\n                }}\n              >\n                Next\n              </Button>\n            )}\n            {current === 2 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  props.setOnboardingComplete();\n                  // curWindow.minimize();\n                  addOnbInfo();\n                  // history.push(\"/home\");\n                }}\n              >\n                Done\n              </Button>\n            )}\n          </div>\n        )}\n        {props.onboarding.user.type === \"4\" && (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            {current > 0 && (\n              <Button\n                style={{ margin: \"0 8px\" }}\n                onClick={() => {\n                  setCurrent(current - 1);\n                }}\n              >\n                Back\n              </Button>\n            )}\n            {current < 1 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  setCurrent(current + 1);\n                }}\n              >\n                Next\n              </Button>\n            )}\n            {current === 1 && (\n              <Button\n                type=\"primary\"\n                onClick={() => {\n                  props.setOnboardingComplete();\n                  // curWindow.minimize();\n                  addOnbInfo();\n                  // history.push(\"/home\");\n                }}\n              >\n                Done\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return { onboarding: state.onboarding, break: state.break };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      setOnboardingComplete: OnboardingActions.setOnboardingComplete,\n      reset: OnboardingActions.reset,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OnboardingScreen);\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/CalendarScreen/index.jsx",["278"],"import React, { useState } from \"react\";\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport { Modal, Button } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { OnboardingActions } from \"../../redux/actions\";\nimport * as dates from \"../../utils/dates\";\nimport \"./styles.css\";\nimport { useHistory } from \"react-router-dom\";\n\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n\nconst ColoredDateCellWrapper = ({ children }) =>\n  React.cloneElement(React.Children.only(children), {\n    style: {\n      backgroundColor: \"lightblue\",\n    },\n  });\n\nconst CalendarScreen = (props) => {\n  const [events, setEvents] = useState([\n    {\n      start: moment().toDate(),\n      end: moment().add(1, \"days\").toDate(),\n      title: \"Test\",\n      id: 1,\n    },\n  ]);\n  const [draggedEvent, setDraggedEvent] = useState(null);\n  const [modalVisible, setModalVisible] = useState(null);\n  const history = useHistory();\n\n  const resizeEvent = ({ event, start, end }) => {\n    const nextEvents = events.map((existingEvent) => {\n      return existingEvent.id === event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent;\n    });\n\n    setEvents(nextEvents);\n  };\n\n  const moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\n    let allDay = event.allDay;\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true;\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false;\n    }\n\n    const nextEvents = events.map((existingEvent) => {\n      return existingEvent.id === event.id\n        ? { ...existingEvent, start, end, allDay }\n        : existingEvent;\n    });\n\n    setEvents(nextEvents);\n\n    // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  };\n\n  const newEvent = ({ slots, start, end }) => {\n    setModalVisible(true);\n    let idList = events.map((a) => a.id);\n    let newId = Math.max(...idList) + 1;\n    let hour = {\n      id: newId,\n      title: \"New Event\",\n      allDay: slots.length === 1,\n      start: start,\n      end: end,\n    };\n\n    setEvents(events.concat([hour]));\n  };\n\n  const onDropFromOutside = ({ start, end, allDay }) => {\n    const event = {\n      id: draggedEvent.id,\n      title: draggedEvent.title,\n      start,\n      end,\n      allDay: allDay,\n    };\n\n    setDraggedEvent(null);\n    this.moveEvent({ event, start, end });\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <Modal\n        visible={modalVisible}\n        onOk={() => {\n          setModalVisible(false);\n        }}\n        onCancel={() => {\n          setModalVisible(false);\n        }}\n      >\n        Hello\n      </Modal>\n      <Button\n        onClick={() => {\n          props.resetInfo();\n          history.push(\"/\")\n        }}\n      >\n        Reset\n      </Button>\n      <DnDCalendar\n        selectable\n        resizable={true}\n        events={events}\n        views={[\"day\", \"week\", \"month\"]}\n        // step={60}\n        showMultiDayTimes\n        defaultDate={new Date()}\n        onSelectSlot={newEvent}\n        components={{\n          timeSlotWrapper: ColoredDateCellWrapper,\n        }}\n        localizer={localizer}\n        max={dates.add(dates.endOf(new Date(), \"day\"), -1, \"hours\")}\n        style={{ height: props.height ? props.height : window.innerHeight }}\n        onEventResize={resizeEvent}\n        onEventDrop={moveEvent}\n        onDropFromOutside={onDropFromOutside}\n        handleDragStart={(event) => {\n          setDraggedEvent(event);\n        }}\n        dragFromOutsideItem={draggedEvent}\n        resizableAccessor={() => false}\n        onSelectEvent={() => {\n          //add code for editing an existing event here\n          setModalVisible(true);\n        }}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators({ resetInfo: OnboardingActions.reset }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarScreen);\n",["279","280"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/StroopScreen/index.jsx",["281","282","283","284","285","286","287","288","289","290","291","292","293","294"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/PopupScreen/index.jsx",["295","296"],"import React from \"react\";\nimport \"./styles.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BreakActions, PastActions } from \"../../redux/actions\";\nimport { Button } from \"antd\";\nimport { store } from \"../../redux\";\nimport { useHistory } from \"react-router-dom\";\n\n//TO-DO: add style\nconst PopupScreen = () => {\n  let dispatch = useDispatch();\n  let history = useHistory();\n  return (\n    <div style={{ backgroundColor: \"white\", padding: \"3%\" }}>\n      <div\n        style={{\n          color: \"#7DCAB6\",\n          fontSize: \"22px\",\n          textAlign: \"center\",\n        }}\n      >\n        It's time to break!\n      </div>\n      <div style={{ paddingTop: \"3%\", fontSize: \"15px\" }}>\n        Should we get started? This break will start automatically if you ignore\n        this pop up\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-end\",\n          marginTop: \"10%\",\n        }}\n      >\n        <Button\n          onClick={() => {\n            let breakInfo = store.getState().break;\n            let pastInfo = store.getState().past;\n            let endtime = breakInfo.breakEndTime;\n            if (breakInfo.breakEndTime.length === 0) {\n              endtime = new Date().toISOString();\n            }\n            let data = {\n              endtime: endtime,\n              intervalBreakData: pastInfo.intervalBreakData,\n              initScheduled: pastInfo.initScheduled,\n              breaksTriggered: breakInfo.breaksTriggered,\n            };\n            dispatch(BreakActions.onCancelBreak(data));\n            history.push(\"/cancel\");\n          }}\n          style={{ color: \"#7DCAB6\", borderWidth: 0 }}\n        >\n          CANCEL\n        </Button>\n        <Button\n          onClick={() => {\n            // dispatch(BreakActions.startBreak())\n            dispatch(BreakActions.startPrebreakfeedback());\n            // history.push(\"/stroop\");\n          }}\n          style={{ color: \"#7DCAB6\", borderWidth: 0 }}\n        >\n          CONTINUE\n        </Button>\n      </div>\n    </div>\n  );\n};\nexport default PopupScreen;\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/SuddenScreen/index.jsx",["297","298"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/FinishingUp.jsx",["299","300","301","302","303","304"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Input } from \"antd\";\n\nimport \"./styles.css\";\n\nconst FinishingUpScreen = (props) => {\n  const [breakArray, setBreakArray] = useState([\"https://www.youtube.com\"]);\n\n  return (\n    <div className=\"step-container\">\n      <h1>You're Almost Done!</h1>\n      <div style={{ marginTop: \"3%\", width: \"70%\" }}>\n        <p style={{ fontSize: \"18px\", marginBottom: \"0\" }}>\n          Thanks for your input! Based on your preferences, we have created a\n          schedule as shown below\n          <br />\n          <br />\n        </p>\n        {(props.onboarding.user.type === \"0\" ||\n          props.onboarding.user.type === \"1\") && (\n          <div style={{ width: \"100%\" }}>\n            <p style={{ fontSize: \"20px\", fontWeight: \"bold\" }}>\n              Scheduled Breaks :{\" \"}\n            </p>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                width: \"50%\",\n              }}\n            >\n              <p style={{ flex: 1 }}>Day</p>\n              <p style={{ flex: 1 }}>Start Time</p>\n              <p style={{ flex: 1 }}>End Time</p>\n            </div>\n            <div>\n              {props.onboarding.scheduledBreaks.map((item, index) => {\n                if (item.start.length > 0) {\n                  return (\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        width: \"50%\",\n                        marginTop: index !== 0 ? \"1%\" : \"0%\",\n                      }}\n                    >\n                      <p style={{ flex: 1 }}>{item.day}</p>\n                      <p style={{ flex: 1 }}>\n                        {new Date(item.start).getHours() +\n                          \":\" +\n                          (new Date(item.start).getMinutes() < 10 ? \"0\" : \"\") +\n                          new Date(item.start).getMinutes()}\n                      </p>\n                      <p style={{ flex: 1 }}>\n                        {new Date(item.end).getHours() +\n                          \":\" +\n                          (new Date(item.end).getMinutes() < 10 ? \"0\" : \"\") +\n                          new Date(item.end).getMinutes()}\n                      </p>\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          </div>\n        )}\n        {(props.onboarding.user.type === \"0\" ||\n          props.onboarding.user.type === \"2\") && (\n          <div style={{ width: \"100%\" }}>\n            <p style={{ fontSize: \"20px\", fontWeight: \"bold\" }}>\n              Regular Breaks :{\" \"}\n            </p>\n            <p>\n              How often you want to take regular breaks :{\" \"}\n              {props.onboarding.regularBreakInterval} hour(s)\n            </p>\n            <p>\n              How long you want these breaks to be :{\" \"}\n              {props.onboarding.regularBreakLength} minute(s)\n            </p>\n          </div>\n        )}\n        {(props.onboarding.user.type === \"0\" ||\n          props.onboarding.user.type === \"3\") && (\n          <div style={{ width: \"100%\" }}>\n            <p style={{ fontSize: \"20px\", fontWeight: \"bold\" }}>\n              Activity Based Breaks :{\" \"}\n            </p>\n\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                width: \"50%\",\n              }}\n            >\n              <p style={{ flex: 1 }}>Site</p>\n              <p style={{ flex: 1 }}>Break Interval (minutes)</p>\n              <p style={{ flex: 1 }}>Break Length (minutes)</p>\n            </div>\n            <div>\n              {props.onboarding.allOverRides.map((item, index) => {\n                if (item.name.length > 0) {\n                  return (\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        justifyContent: \"space-between\",\n                        width: \"50%\",\n                        marginTop: index !== 0 ? \"1%\" : \"0%\",\n                      }}\n                    >\n                      <p style={{ flex: 1 }}>{item.name}</p>\n                      <p style={{ flex: 1 }}>{item.interval}</p>\n                      <p style={{ flex: 1 }}>{item.breakLength}</p>\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          </div>\n        )}\n        <p style={{ fontSize: \"18px\", marginBottom: \"5%\" }}>\n          If you want to make any changes, click on the back button and change\n          your settings. You can always come back and make edits to your\n          schedule and overrides in 'My Settings'.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { onboarding: state.onboarding };\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishingUpScreen);\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Games/fruit_ninja_manager.jsx",["305"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Calendar.jsx",["306","307","308","309","310","311","312","313","314","315","316","317","318","319","320"],"import React, { useState, useEffect } from \"react\";\nimport { Calendar, momentLocalizer, Views } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Modal, message } from \"antd\";\nimport * as dates from \"../utils/dates\";\nimport s1 from \"../assets/s1.png\";\nimport s2 from \"../assets/s2.png\";\nimport s3 from \"../assets/s3.png\";\nimport s4 from \"../assets/s4.png\";\nimport s5 from \"../assets/s5.png\";\n\nimport s1y from \"../assets/s1y.png\";\nimport s2y from \"../assets/s2y.png\";\nimport s3y from \"../assets/s3y.png\";\nimport s4y from \"../assets/s4y.png\";\nimport s5y from \"../assets/s5y.png\";\nimport \"./styles.css\";\n\nconst localizer = momentLocalizer(moment);\n\nconst ColoredDateCellWrapper = ({ children }) =>\n  React.cloneElement(React.Children.only(children), {\n    style: {\n      backgroundColor: \"lightblue\",\n    },\n  });\n\nconst CalendarComponent = (props) => {\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [modalVisible, setModalVisible] = useState(null);\n  const [selectedEvent, setSelectedEvent] = useState({});\n  const [rate, setRate] = useState(0);\n  const [feedbackText, setFeedbackText] = useState(\"\");\n  const number_array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let mounted = true;\n\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    let today = new Date();\n    today.setHours(0, 0, 0, 0);\n    let tomorrow = new Date();\n    tomorrow.setHours(23, 59, 59, 999);\n    let body = {\n      user: props.onboarding.user._id,\n      today: today,\n      tomorrow: tomorrow,\n    };\n    let response = await axios.post(\n      \"https://thepallab.com/api/user/get-break-cal\",\n      body\n    );\n    if (response.data.finalData) {\n      let dataTemp = response.data.finalData;\n      for (let i = 0; i < dataTemp.length; i++) {\n        let newDate = new Date(dataTemp[i].start);\n        dataTemp[i].start = newDate;\n        let newDateEnd = new Date(dataTemp[i].end);\n        dataTemp[i].end = newDateEnd;\n      }\n\n      setEvents(dataTemp);\n    }\n    setLoading(false);\n  };\n\n  const onEventResize = (data) => {};\n\n  const onEventDrop = (data) => {\n    const { start, end } = data;\n    events[0].start = start;\n    events[0].end = end;\n    setEvents(events);\n  };\n  let getImageButton = (name, name2, points, rate, setRate, mounted) => {\n    if (points == rate)\n      return (\n        <div className=\"responsive\">\n          <div className=\"gallery\">\n            <button\n              className=\"feedback-button\"\n              onClick={() => {\n                if (mounted) setRate(points);\n              }}\n            >\n              <p style={{ fontSize: \"50px\" }}>{points - 1}</p>\n            </button>\n          </div>\n        </div>\n      );\n    else\n      return (\n        <div className=\"responsive\">\n          <div className=\"gallery\">\n            <button\n              className=\"feedback-button\"\n              onClick={() => {\n                if (mounted) setRate(points);\n              }}\n            >\n              <p style={{ fontSize: \"50px\", opacity: \"0.5\" }}>{points - 1}</p>\n            </button>\n          </div>\n        </div>\n      );\n  };\n  if (loading) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <h3 style={{ textAlign: \"center\" }}>Loading data...</h3>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Modal\n          width={\"1000px\"}\n          visible={modalVisible}\n          onOk={async () => {\n            let body = {\n              _id: selectedEvent._id,\n              feedbackText,\n              feedbackScore: rate,\n            };\n            let response = await axios.post(\n              \"https://thepallab.com/api/user/update-break\",\n              body\n            );\n            if (response.data.message !== \"Successful Update\") {\n              message.error(\"Your entry was not updated\");\n            }\n            setModalVisible(false);\n            setLoading(true);\n            getData();\n          }}\n          onCancel={() => {\n            setModalVisible(false);\n          }}\n        >\n          <div>\n            <p>\n              Break Start : {new Date(selectedEvent.start).getDate()}{\" \"}\n              {months[new Date(selectedEvent.start).getMonth()]},{\" \"}\n              {new Date(selectedEvent.start).getHours()}:\n              {(new Date(selectedEvent.start).getMinutes() < 10 ? \"0\" : \"\") +\n                new Date(selectedEvent.start).getMinutes()}\n            </p>\n            <p>\n              Break End : {new Date(selectedEvent.end).getDate()}{\" \"}\n              {months[new Date(selectedEvent.end).getMonth()]},{\" \"}\n              {new Date(selectedEvent.end).getHours()}:\n              {(new Date(selectedEvent.end).getMinutes() < 10 ? \"0\" : \"\") +\n                new Date(selectedEvent.end).getMinutes()}\n            </p>\n            <p>Break Type : {selectedEvent.title}</p>\n            <p>Break Score : </p>\n            <div className=\"break-feedback\">\n              {number_array.map((item, index) => {\n                return getImageButton(\n                  s5,\n                  s5y,\n                  item + 1,\n                  rate,\n                  setRate,\n                  mounted\n                );\n              })}\n              {/* {getImageButton(s5, s5y, 1, rate, setRate, mounted)}\n              {getImageButton(s4, s4y, 2, rate, setRate, mounted)}\n              {getImageButton(s3, s3y, 3, rate, setRate, mounted)}\n              {getImageButton(s2, s2y, 4, rate, setRate, mounted)}\n              {getImageButton(s1, s1y, 5, rate, setRate, mounted)} */}\n            </div>\n            <p>Break Feedback : </p>\n            <div\n              className=\"\"\n              style={{\n                height: \"15%\",\n                width: \"100%\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                backgroundColor: \"white\",\n              }}\n            >\n              <textarea\n                onChange={(event) => {\n                  if (mounted) setFeedbackText(event.target.value);\n                }}\n                data-role=\"none\"\n                rows=\"3\"\n                cols=\"80\"\n                placeholder=\"Type in here any notes or reflections about the break that you would like to save\"\n                className=\"feedback-text\"\n                value={feedbackText}\n              />\n            </div>\n          </div>\n        </Modal>\n        <Calendar\n          events={events}\n          views={[\"day\", \"week\", \"month\"]}\n          step={60}\n          showMultiDayTimes\n          localizer={localizer}\n          defaultDate={new Date()}\n          popup\n          style={{ height: 500 }}\n          onSelectEvent={(event) => {\n            //add code for editing an existing event here\n            setSelectedEvent(event);\n            setRate(event.feedbackScore);\n            setFeedbackText(event.feedbackText);\n            setModalVisible(true);\n          }}\n        />\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return { onboarding: state.onboarding };\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CalendarComponent);\n",["321","322"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/ScheduledBreaks.jsx",["323","324"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/navigation/index.js",["325","326","327","328","329"],"import React, { Suspense, lazy, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport Loading from \"../components/Loading\";\nimport BreakManager from \"../breakmanager\";\nimport { store } from \"../redux\";\nimport { BreakActions } from \"../redux/actions\";\nimport { Provider, useDispatch } from \"react-redux\";\nconst { ipcRenderer, remote } = window.require(\"electron\");\nconst BreakScreen = lazy(() => import(\"../screens/BreakScreen\"));\nconst HomeScreen = lazy(() => import(\"../screens/HomeScreen\"));\nconst OnboardingScreen = lazy(() => import(\"../screens/OnboardingScreen\"));\nconst CalendarScreen = lazy(() => import(\"../screens/CalendarScreen\"));\nconst PopupScreen = lazy(() => import(\"../screens/PopupScreen\"));\nconst StroopScreen = lazy(() => import(\"../screens/StroopScreen\"));\nconst FruitNinjaScreen = lazy(() => import(\"../screens/FruitNinjaScreen\"));\nconst LoginScreen = lazy(() => import(\"../screens/LoginScreen\"));\nconst AWCheckerScreen = lazy(() => import(\"../screens/AWCheckerScreen\"));\nconst AnalyticsScreen = lazy(() => import(\"../screens/AnalyticsScreen\"));\nconst NewHomeScreen = lazy(() => import(\"../screens/NewHomeScreen\"));\nconst BreakFeedbackScreen = lazy(() =>\n  import(\"../screens/BreakFeedbackScreen\")\n);\nconst CancelScreen = lazy(() => import(\"../screens/CancelScreen\"));\nconst SuddenScreen = lazy(() => import(\"../screens/SuddenScreen\"));\nconst EditScheduledBreakScreen = lazy(() =>\n  import(\"../screens/EditScheduledBreaks\")\n);\nconst EditRegularBreakScreen = lazy(() =>\n  import(\"../screens/EditRegularBreaksScreen\")\n);\nconst EditAdHocBreakScreen = lazy(() =>\n  import(\"../screens/EditActivityBreaksScreen\")\n);\nconst SignupScreen = lazy(() => import(\"../screens/SignUpScreen\"));\n\nconst AWScreen = lazy(() => import(\"../screens/AWScreen\"));\nconst PreBreakFeedbackScreen = lazy(() =>\n  import(\"../screens/PreBreakFeedbackScreen\")\n);\n\nconst CPTScreen = lazy(() => import(\"../screens/CPTScreen\"));\nconst WeeklyForm = lazy(() => import(\"../screens/WeeklyForm\"));\nconst WeeklyPopUp = lazy(() => import(\"../screens/WeeklyPopUp\"));\nconst CBTestScreen = lazy(() => import(\"../screens/CBTestScreen\"));\n\nconst Main = () => {\n  let history = useHistory();\n  //script to manage break triggers is called here\n  let dispatch = useDispatch();\n  useEffect(() => {\n    window.ipcRenderer.on(\"app-closing\", (event, data) => {\n      dispatch(BreakActions.resetBreak());\n      history.push(\"/home\");\n    });\n  }, []);\n  useEffect(() => {\n    if (store.getState().onboarding.complete) {\n      BreakManager(history);\n      if (store.getState().break.breakState !== \"break\") {\n        dispatch(BreakActions.resetBreak());\n      }\n    }\n    if (store.getState().break.breakState === \"break-popup\") {\n    } else if (store.getState().break.breakState === \"break\") {\n      dispatch(BreakActions.startBreak());\n    }\n    ipcRenderer.on(\"asynchronous-message\", function (evt, message) {\n      history.push(\"/sud\");\n    });\n    ipcRenderer.on(\"asynchronous-message-two\", function (evt, message) {\n      dispatch(BreakActions.resetBreak());\n      history.push(\"/home\");\n    });\n  }, []);\n  return (\n    <Suspense fallback={<Loading />}>\n      <Switch>\n        <Route exact path=\"/calendar\" component={CalendarScreen} />\n        <Route exact path=\"/login\" component={LoginScreen} />\n        <Route exact path=\"/\" component={OnboardingScreen} />\n        <Route path=\"/break\" component={BreakScreen} />\n        <Route path=\"/popup\" component={PopupScreen} />\n        <Route path=\"/home\" component={NewHomeScreen} />\n        <Route path=\"/stroop\" component={StroopScreen} />\n        <Route path=\"/fruit\" component={FruitNinjaScreen} />\n        <Route path=\"/aw\" component={AWCheckerScreen} />\n        <Route path=\"/ana\" component={AnalyticsScreen} />\n        <Route path=\"/feedback\" component={BreakFeedbackScreen} />\n        <Route path=\"/cancel\" component={CancelScreen} />\n        <Route path=\"/sud\" component={SuddenScreen} />\n        <Route path=\"/edit-sched\" component={EditScheduledBreakScreen} />\n        <Route path=\"/edit-reg\" component={EditRegularBreakScreen} />\n        <Route path=\"/edit-act\" component={EditAdHocBreakScreen} />\n        <Route path=\"/awviz\" component={AWScreen} />\n        <Route path=\"/signup\" component={SignupScreen} />\n        <Route path=\"/prefeedback\" component={PreBreakFeedbackScreen} />\n        <Route path=\"/cpt\" component={CPTScreen} />\n        <Route path=\"/week\" component={WeeklyForm} />\n        <Route path=\"/weekpop\" component={WeeklyPopUp} />\n        <Route path=\"/cbt\" component={CBTestScreen} />\n      </Switch>\n    </Suspense>\n  );\n};\n\nexport default Main;\n","/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/AnalyticsScreen/index.jsx",["330","331","332"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/reducers/onboarding.reducer.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/OnboardingScreen/PersonalInformation.jsx",["333","334","335"],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/components/Loading.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/screens/LoginScreen/index.jsx",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/actions/onboarding.action.js",[],"/Users/shriramchenniappa/Desktop/personal/RL_app/src/redux/types/past.types.js",[],{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","severity":1,"message":"341","line":1,"column":15,"nodeType":"342","messageId":"343","endLine":1,"endColumn":19},{"ruleId":"336","replacedBy":"344"},{"ruleId":"338","replacedBy":"345"},{"ruleId":"340","severity":1,"message":"346","line":1,"column":10,"nodeType":"342","messageId":"343","endLine":1,"endColumn":22},{"ruleId":"340","severity":1,"message":"347","line":52,"column":11,"nodeType":"342","messageId":"343","endLine":52,"endColumn":19},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"349","line":1,"column":28,"nodeType":"342","messageId":"343","endLine":1,"endColumn":36},{"ruleId":"336","replacedBy":"350"},{"ruleId":"338","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":54,"column":43,"nodeType":"354","messageId":"355","endLine":54,"endColumn":45},{"ruleId":"336","replacedBy":"356"},{"ruleId":"338","replacedBy":"357"},{"ruleId":"340","severity":1,"message":"358","line":101,"column":11,"nodeType":"342","messageId":"343","endLine":101,"endColumn":17},{"ruleId":"359","severity":1,"message":"360","line":121,"column":42,"nodeType":"361","messageId":"362","endLine":121,"endColumn":43},{"ruleId":"359","severity":1,"message":"360","line":121,"column":68,"nodeType":"361","messageId":"362","endLine":121,"endColumn":69},{"ruleId":"359","severity":1,"message":"360","line":137,"column":42,"nodeType":"361","messageId":"362","endLine":137,"endColumn":43},{"ruleId":"359","severity":1,"message":"360","line":137,"column":68,"nodeType":"361","messageId":"362","endLine":137,"endColumn":69},{"ruleId":"363","severity":1,"message":"364","line":30,"column":6,"nodeType":"365","endLine":30,"endColumn":8,"suggestions":"366"},{"ruleId":"367","severity":1,"message":"368","line":32,"column":27,"nodeType":"361","messageId":"369","endLine":32,"endColumn":29},{"ruleId":"370","severity":1,"message":"371","line":71,"column":7,"nodeType":"342","messageId":"372","endLine":71,"endColumn":12},{"ruleId":"370","severity":1,"message":"373","line":72,"column":7,"nodeType":"342","messageId":"372","endLine":72,"endColumn":13},{"ruleId":"340","severity":1,"message":"374","line":83,"column":13,"nodeType":"342","messageId":"343","endLine":83,"endColumn":19},{"ruleId":"340","severity":1,"message":"375","line":83,"column":21,"nodeType":"342","messageId":"343","endLine":83,"endColumn":30},{"ruleId":"340","severity":1,"message":"376","line":83,"column":32,"nodeType":"342","messageId":"343","endLine":83,"endColumn":37},{"ruleId":"340","severity":1,"message":"377","line":83,"column":39,"nodeType":"342","messageId":"343","endLine":83,"endColumn":45},{"ruleId":"340","severity":1,"message":"378","line":83,"column":47,"nodeType":"342","messageId":"343","endLine":83,"endColumn":63},{"ruleId":"367","severity":1,"message":"368","line":113,"column":19,"nodeType":"361","messageId":"369","endLine":113,"endColumn":21},{"ruleId":"336","replacedBy":"379"},{"ruleId":"338","replacedBy":"380"},{"ruleId":"340","severity":1,"message":"381","line":1,"column":27,"nodeType":"342","messageId":"343","endLine":1,"endColumn":34},{"ruleId":"340","severity":1,"message":"382","line":5,"column":7,"nodeType":"342","messageId":"343","endLine":5,"endColumn":12},{"ruleId":"340","severity":1,"message":"383","line":6,"column":7,"nodeType":"342","messageId":"343","endLine":6,"endColumn":11},{"ruleId":"336","replacedBy":"384"},{"ruleId":"338","replacedBy":"385"},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"349","line":1,"column":28,"nodeType":"342","messageId":"343","endLine":1,"endColumn":36},{"ruleId":"336","replacedBy":"386"},{"ruleId":"338","replacedBy":"387"},{"ruleId":"340","severity":1,"message":"348","line":1,"column":27,"nodeType":"342","messageId":"343","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"388","line":9,"column":9,"nodeType":"342","messageId":"343","endLine":9,"endColumn":17},{"ruleId":"340","severity":1,"message":"389","line":12,"column":10,"nodeType":"342","messageId":"343","endLine":12,"endColumn":18},{"ruleId":"340","severity":1,"message":"390","line":12,"column":20,"nodeType":"342","messageId":"343","endLine":12,"endColumn":31},{"ruleId":"367","severity":1,"message":"391","line":143,"column":44,"nodeType":"361","messageId":"369","endLine":143,"endColumn":46},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"349","line":1,"column":28,"nodeType":"342","messageId":"343","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"349","line":1,"column":28,"nodeType":"342","messageId":"343","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"392","line":4,"column":10,"nodeType":"342","messageId":"343","endLine":4,"endColumn":16},{"ruleId":"340","severity":1,"message":"393","line":4,"column":24,"nodeType":"342","messageId":"343","endLine":4,"endColumn":29},{"ruleId":"340","severity":1,"message":"394","line":15,"column":9,"nodeType":"342","messageId":"343","endLine":15,"endColumn":16},{"ruleId":"340","severity":1,"message":"395","line":1,"column":24,"nodeType":"342","messageId":"343","endLine":1,"endColumn":35},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"396","line":4,"column":48,"nodeType":"342","messageId":"343","endLine":4,"endColumn":55},{"ruleId":"340","severity":1,"message":"397","line":15,"column":10,"nodeType":"342","messageId":"343","endLine":15,"endColumn":15},{"ruleId":"340","severity":1,"message":"398","line":15,"column":17,"nodeType":"342","messageId":"343","endLine":15,"endColumn":25},{"ruleId":"340","severity":1,"message":"399","line":19,"column":9,"nodeType":"342","messageId":"343","endLine":19,"endColumn":18},{"ruleId":"400","severity":1,"message":"401","line":136,"column":3,"nodeType":"402","messageId":"403","endLine":147,"endColumn":4},{"ruleId":"404","severity":1,"message":"405","line":139,"column":5,"nodeType":"406","messageId":"407","endLine":140,"endColumn":16},{"ruleId":"404","severity":1,"message":"405","line":141,"column":5,"nodeType":"406","messageId":"407","endLine":142,"endColumn":16},{"ruleId":"404","severity":1,"message":"405","line":143,"column":5,"nodeType":"406","messageId":"407","endLine":144,"endColumn":16},{"ruleId":"404","severity":1,"message":"405","line":145,"column":5,"nodeType":"406","messageId":"407","endLine":146,"endColumn":18},{"ruleId":"336","replacedBy":"408"},{"ruleId":"338","replacedBy":"409"},{"ruleId":"336","replacedBy":"410"},{"ruleId":"338","replacedBy":"411"},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"412","line":7,"column":8,"nodeType":"342","messageId":"343","endLine":7,"endColumn":15},{"ruleId":"340","severity":1,"message":"413","line":8,"column":10,"nodeType":"342","messageId":"343","endLine":8,"endColumn":25},{"ruleId":"340","severity":1,"message":"414","line":19,"column":10,"nodeType":"342","messageId":"343","endLine":19,"endColumn":17},{"ruleId":"340","severity":1,"message":"415","line":19,"column":19,"nodeType":"342","messageId":"343","endLine":19,"endColumn":29},{"ruleId":"340","severity":1,"message":"416","line":22,"column":19,"nodeType":"342","messageId":"343","endLine":22,"endColumn":26},{"ruleId":"340","severity":1,"message":"394","line":49,"column":9,"nodeType":"342","messageId":"343","endLine":49,"endColumn":16},{"ruleId":"367","severity":1,"message":"368","line":54,"column":16,"nodeType":"361","messageId":"369","endLine":54,"endColumn":18},{"ruleId":"340","severity":1,"message":"417","line":156,"column":19,"nodeType":"342","messageId":"343","endLine":156,"endColumn":28},{"ruleId":"340","severity":1,"message":"418","line":184,"column":12,"nodeType":"342","messageId":"343","endLine":184,"endColumn":24},{"ruleId":"340","severity":1,"message":"419","line":4,"column":8,"nodeType":"342","messageId":"343","endLine":4,"endColumn":20},{"ruleId":"340","severity":1,"message":"394","line":15,"column":7,"nodeType":"342","messageId":"343","endLine":15,"endColumn":14},{"ruleId":"340","severity":1,"message":"420","line":15,"column":10,"nodeType":"342","messageId":"343","endLine":15,"endColumn":31},{"ruleId":"363","severity":1,"message":"421","line":66,"column":6,"nodeType":"365","endLine":66,"endColumn":8,"suggestions":"422"},{"ruleId":"340","severity":1,"message":"423","line":2,"column":37,"nodeType":"342","messageId":"343","endLine":2,"endColumn":42},{"ruleId":"336","replacedBy":"424"},{"ruleId":"338","replacedBy":"425"},{"ruleId":"340","severity":1,"message":"426","line":2,"column":23,"nodeType":"342","messageId":"343","endLine":2,"endColumn":34},{"ruleId":"340","severity":1,"message":"346","line":3,"column":10,"nodeType":"342","messageId":"343","endLine":3,"endColumn":22},{"ruleId":"340","severity":1,"message":"395","line":3,"column":24,"nodeType":"342","messageId":"343","endLine":3,"endColumn":35},{"ruleId":"340","severity":1,"message":"392","line":4,"column":10,"nodeType":"342","messageId":"343","endLine":4,"endColumn":16},{"ruleId":"340","severity":1,"message":"427","line":5,"column":10,"nodeType":"342","messageId":"343","endLine":5,"endColumn":15},{"ruleId":"340","severity":1,"message":"428","line":8,"column":9,"nodeType":"342","messageId":"343","endLine":8,"endColumn":20},{"ruleId":"340","severity":1,"message":"429","line":8,"column":22,"nodeType":"342","messageId":"343","endLine":8,"endColumn":28},{"ruleId":"340","severity":1,"message":"430","line":10,"column":5,"nodeType":"342","messageId":"343","endLine":10,"endColumn":7},{"ruleId":"340","severity":1,"message":"431","line":19,"column":10,"nodeType":"342","messageId":"343","endLine":19,"endColumn":17},{"ruleId":"340","severity":1,"message":"432","line":19,"column":19,"nodeType":"342","messageId":"343","endLine":19,"endColumn":30},{"ruleId":"340","severity":1,"message":"433","line":20,"column":10,"nodeType":"342","messageId":"343","endLine":20,"endColumn":16},{"ruleId":"340","severity":1,"message":"434","line":20,"column":18,"nodeType":"342","messageId":"343","endLine":20,"endColumn":26},{"ruleId":"340","severity":1,"message":"435","line":21,"column":7,"nodeType":"342","messageId":"343","endLine":21,"endColumn":15},{"ruleId":"340","severity":1,"message":"436","line":22,"column":7,"nodeType":"342","messageId":"343","endLine":22,"endColumn":12},{"ruleId":"340","severity":1,"message":"426","line":3,"column":23,"nodeType":"342","messageId":"343","endLine":3,"endColumn":34},{"ruleId":"340","severity":1,"message":"395","line":4,"column":24,"nodeType":"342","messageId":"343","endLine":4,"endColumn":35},{"ruleId":"340","severity":1,"message":"437","line":4,"column":8,"nodeType":"342","messageId":"343","endLine":4,"endColumn":13},{"ruleId":"340","severity":1,"message":"394","line":14,"column":9,"nodeType":"342","messageId":"343","endLine":14,"endColumn":16},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"438","line":4,"column":10,"nodeType":"342","messageId":"343","endLine":4,"endColumn":15},{"ruleId":"340","severity":1,"message":"439","line":9,"column":10,"nodeType":"342","messageId":"343","endLine":9,"endColumn":20},{"ruleId":"340","severity":1,"message":"440","line":9,"column":22,"nodeType":"342","messageId":"343","endLine":9,"endColumn":35},{"ruleId":"352","severity":1,"message":"441","line":40,"column":67,"nodeType":"354","messageId":"442","endLine":40,"endColumn":69},{"ruleId":"352","severity":1,"message":"441","line":108,"column":64,"nodeType":"354","messageId":"442","endLine":108,"endColumn":66},{"ruleId":"340","severity":1,"message":"392","line":1,"column":10,"nodeType":"342","messageId":"343","endLine":1,"endColumn":16},{"ruleId":"340","severity":1,"message":"423","line":2,"column":37,"nodeType":"342","messageId":"343","endLine":2,"endColumn":42},{"ruleId":"340","severity":1,"message":"443","line":8,"column":13,"nodeType":"342","messageId":"343","endLine":8,"endColumn":18},{"ruleId":"340","severity":1,"message":"444","line":9,"column":8,"nodeType":"342","messageId":"343","endLine":9,"endColumn":10},{"ruleId":"340","severity":1,"message":"445","line":10,"column":8,"nodeType":"342","messageId":"343","endLine":10,"endColumn":10},{"ruleId":"340","severity":1,"message":"446","line":11,"column":8,"nodeType":"342","messageId":"343","endLine":11,"endColumn":10},{"ruleId":"340","severity":1,"message":"447","line":12,"column":8,"nodeType":"342","messageId":"343","endLine":12,"endColumn":10},{"ruleId":"340","severity":1,"message":"448","line":15,"column":8,"nodeType":"342","messageId":"343","endLine":15,"endColumn":11},{"ruleId":"340","severity":1,"message":"449","line":16,"column":8,"nodeType":"342","messageId":"343","endLine":16,"endColumn":11},{"ruleId":"340","severity":1,"message":"450","line":17,"column":8,"nodeType":"342","messageId":"343","endLine":17,"endColumn":11},{"ruleId":"340","severity":1,"message":"451","line":18,"column":8,"nodeType":"342","messageId":"343","endLine":18,"endColumn":11},{"ruleId":"340","severity":1,"message":"452","line":24,"column":7,"nodeType":"342","messageId":"343","endLine":24,"endColumn":29},{"ruleId":"363","severity":1,"message":"453","line":57,"column":6,"nodeType":"365","endLine":57,"endColumn":8,"suggestions":"454"},{"ruleId":"340","severity":1,"message":"455","line":86,"column":9,"nodeType":"342","messageId":"343","endLine":86,"endColumn":22},{"ruleId":"340","severity":1,"message":"456","line":88,"column":9,"nodeType":"342","messageId":"343","endLine":88,"endColumn":20},{"ruleId":"367","severity":1,"message":"368","line":95,"column":16,"nodeType":"361","messageId":"369","endLine":95,"endColumn":18},{"ruleId":"336","replacedBy":"457"},{"ruleId":"338","replacedBy":"458"},{"ruleId":"340","severity":1,"message":"348","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"349","line":1,"column":28,"nodeType":"342","messageId":"343","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"459","line":7,"column":10,"nodeType":"342","messageId":"343","endLine":7,"endColumn":18},{"ruleId":"340","severity":1,"message":"429","line":8,"column":22,"nodeType":"342","messageId":"343","endLine":8,"endColumn":28},{"ruleId":"340","severity":1,"message":"460","line":10,"column":7,"nodeType":"342","messageId":"343","endLine":10,"endColumn":17},{"ruleId":"363","severity":1,"message":"461","line":55,"column":6,"nodeType":"365","endLine":55,"endColumn":8,"suggestions":"462"},{"ruleId":"363","severity":1,"message":"461","line":74,"column":6,"nodeType":"365","endLine":74,"endColumn":8,"suggestions":"463"},{"ruleId":"340","severity":1,"message":"464","line":2,"column":10,"nodeType":"342","messageId":"343","endLine":2,"endColumn":27},{"ruleId":"340","severity":1,"message":"438","line":3,"column":18,"nodeType":"342","messageId":"343","endLine":3,"endColumn":23},{"ruleId":"363","severity":1,"message":"453","line":22,"column":6,"nodeType":"365","endLine":22,"endColumn":8,"suggestions":"465"},{"ruleId":"340","severity":1,"message":"466","line":15,"column":10,"nodeType":"342","messageId":"343","endLine":15,"endColumn":17},{"ruleId":"340","severity":1,"message":"467","line":15,"column":19,"nodeType":"342","messageId":"343","endLine":15,"endColumn":29},{"ruleId":"340","severity":1,"message":"399","line":19,"column":9,"nodeType":"342","messageId":"343","endLine":19,"endColumn":18},"no-native-reassign",["468"],"no-negated-in-lhs",["469"],"no-unused-vars","'fork' is defined but never used.","Identifier","unusedVar",["468"],["469"],"'BreakActions' is defined but never used.","'response' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",["468"],["469"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["468"],["469"],"'chrome' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.","ArrayExpression",["470"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","no-redeclare","'words' is already defined.","redeclared","'colors' is already defined.","'errors' is assigned a value but never used.","'successes' is assigned a value but never used.","'begin' is assigned a value but never used.","'finish' is assigned a value but never used.","'timeLimitReached' is assigned a value but never used.",["468"],["469"],"'Reducer' is defined but never used.","'isDev' is assigned a value but never used.","'path' is assigned a value but never used.",["468"],["469"],["468"],["469"],"'TextArea' is assigned a value but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'Modal' is defined but never used.","'history' is assigned a value but never used.","'PastActions' is defined but never used.","'message' is defined but never used.","'sites' is assigned a value but never used.","'setSites' is assigned a value but never used.","'showModal' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case",["468"],["469"],["468"],["469"],"'Loading' is defined but never used.","'AWClientService' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setNext' is assigned a value but never used.","'insertCal' is assigned a value but never used.","'shuffleArray' is defined but never used.","'BreakManager' is defined but never used.","'setOnboardingComplete' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'props.onboarding.awChecked', 'props.onboarding.complete', and 'props.onboarding.user'. Either include them or remove the dependency array.",["471"],"'Views' is defined but never used.",["468"],["469"],"'useSelector' is defined but never used.","'store' is defined but never used.","'ipcRenderer' is assigned a value but never used.","'remote' is assigned a value but never used.","'s1' is assigned a value but never used.","'complte' is assigned a value but never used.","'setComplete' is assigned a value but never used.","'scores' is assigned a value but never used.","'setScore' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'order' is assigned a value but never used.","'axios' is defined but never used.","'Input' is defined but never used.","'breakArray' is assigned a value but never used.","'setBreakArray' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'dates' is defined but never used.","'s1' is defined but never used.","'s2' is defined but never used.","'s3' is defined but never used.","'s4' is defined but never used.","'s1y' is defined but never used.","'s2y' is defined but never used.","'s3y' is defined but never used.","'s4y' is defined but never used.","'ColoredDateCellWrapper' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["472"],"'onEventResize' is assigned a value but never used.","'onEventDrop' is assigned a value but never used.",["468"],["469"],"'Provider' is defined but never used.","'HomeScreen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["473"],["474"],"'OnboardingActions' is defined but never used.",["475"],"'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"482","fix":"484"},{"desc":"480","fix":"485"},"Update the dependencies array to be: [count]",{"range":"486","text":"487"},"Update the dependencies array to be: [history, props.onboarding.awChecked, props.onboarding.complete, props.onboarding.user]",{"range":"488","text":"489"},"Update the dependencies array to be: [getData]",{"range":"490","text":"491"},"Update the dependencies array to be: [dispatch, history]",{"range":"492","text":"493"},{"range":"494","text":"493"},{"range":"495","text":"491"},[723,725],"[count]",[2082,2084],"[history, props.onboarding.awChecked, props.onboarding.complete, props.onboarding.user]",[1595,1597],"[getData]",[2452,2454],"[dispatch, history]",[3111,3113],[766,768]]