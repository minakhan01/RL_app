[{"C:\\code\\mit\\RL_app\\src\\index.js":"1","C:\\code\\mit\\RL_app\\src\\redux\\actions\\index.js":"2","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\index.js":"3","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\break.reducer.js":"4","C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\PersonalInformation.jsx":"5","C:\\code\\mit\\RL_app\\src\\components\\Games\\fruit_ninja_manager.jsx":"6","C:\\code\\mit\\RL_app\\src\\screens\\CBTestScreen\\index.jsx":"7","C:\\code\\mit\\RL_app\\src\\navigation\\index.js":"8","C:\\code\\mit\\RL_app\\src\\redux\\types\\onboarding.types.js":"9","C:\\code\\mit\\RL_app\\src\\redux\\reducers\\onboarding.reducer.js":"10","C:\\code\\mit\\RL_app\\src\\redux\\actions\\onboarding.action.js":"11","C:\\code\\mit\\RL_app\\src\\screens\\AWCheckerScreen\\index.jsx":"12","C:\\code\\mit\\RL_app\\src\\screens\\WeeklyForm\\index.jsx":"13","C:\\code\\mit\\RL_app\\src\\breakmanager\\weeklyChecker.js":"14","C:\\code\\mit\\RL_app\\src\\breakmanager\\EventHandler\\index.js":"15","C:\\code\\mit\\RL_app\\src\\breakmanager\\Checker\\activityrule.break.js":"16","C:\\code\\mit\\RL_app\\src\\services\\index.js":"17","C:\\code\\mit\\RL_app\\src\\components\\Toolbar.js":"18","C:\\code\\mit\\RL_app\\src\\App.js":"19","C:\\code\\mit\\RL_app\\src\\redux\\store.js":"20","C:\\code\\mit\\RL_app\\src\\screens\\EditActivityBreaksScreen\\index.jsx":"21","C:\\code\\mit\\RL_app\\src\\components\\Games\\index.jsx":"22","C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\AdHocBreaks.jsx":"23","C:\\code\\mit\\RL_app\\src\\breakmanager\\Checker\\index.js":"24","C:\\code\\mit\\RL_app\\src\\components\\Timer.js":"25","C:\\code\\mit\\RL_app\\src\\reportWebVitals.js":"26","C:\\code\\mit\\RL_app\\src\\screens\\EditScheduledBreaks\\index.jsx":"27","C:\\code\\mit\\RL_app\\src\\components\\Games\\stroop_test\\index.jsx":"28","C:\\code\\mit\\RL_app\\src\\screens\\WeeklyPopUp\\index.jsx":"29","C:\\code\\mit\\RL_app\\src\\redux\\types\\index.js":"30"},{"size":517,"mtime":1609573919413,"results":"31","hashOfConfig":"32"},{"size":217,"mtime":1610597903298,"results":"33","hashOfConfig":"32"},{"size":461,"mtime":1610597903300,"results":"34","hashOfConfig":"32"},{"size":5447,"mtime":1635324261602,"results":"35","hashOfConfig":"32"},{"size":4625,"mtime":1635535385813,"results":"36","hashOfConfig":"32"},{"size":568,"mtime":1635503148087,"results":"37","hashOfConfig":"32"},{"size":2168,"mtime":1637061328347,"results":"38","hashOfConfig":"32"},{"size":4552,"mtime":1637061346717,"results":"39","hashOfConfig":"32"},{"size":859,"mtime":1637060776177,"results":"40","hashOfConfig":"32"},{"size":4172,"mtime":1637387372113,"results":"41","hashOfConfig":"32"},{"size":1959,"mtime":1637060818995,"results":"42","hashOfConfig":"32"},{"size":5491,"mtime":1637084942129,"results":"43","hashOfConfig":"32"},{"size":6201,"mtime":1637061271096,"results":"44","hashOfConfig":"32"},{"size":565,"mtime":1637061293793,"results":"45","hashOfConfig":"32"},{"size":3053,"mtime":1635539707072,"results":"46","hashOfConfig":"32"},{"size":7557,"mtime":1636397741969,"results":"47","hashOfConfig":"32"},{"size":129,"mtime":1609674823101,"results":"48","hashOfConfig":"32"},{"size":2585,"mtime":1635255816217,"results":"49","hashOfConfig":"32"},{"size":656,"mtime":1632483733427,"results":"50","hashOfConfig":"32"},{"size":587,"mtime":1610600783281,"results":"51","hashOfConfig":"32"},{"size":15279,"mtime":1635332427615,"results":"52","hashOfConfig":"32"},{"size":7340,"mtime":1635535385811,"results":"53","hashOfConfig":"32"},{"size":13719,"mtime":1635331369988,"results":"54","hashOfConfig":"32"},{"size":611,"mtime":1637387218451,"results":"55","hashOfConfig":"32"},{"size":1081,"mtime":1610597903297,"results":"56","hashOfConfig":"32"},{"size":375,"mtime":1609573919416,"results":"57","hashOfConfig":"32"},{"size":6011,"mtime":1633943017578,"results":"58","hashOfConfig":"32"},{"size":3816,"mtime":1635504590686,"results":"59","hashOfConfig":"32"},{"size":1538,"mtime":1635421948957,"results":"60","hashOfConfig":"32"},{"size":144,"mtime":1610597903301,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"138jipk",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\mit\\RL_app\\src\\index.js",[],["135","136"],"C:\\code\\mit\\RL_app\\src\\redux\\actions\\index.js",[],"C:\\code\\mit\\RL_app\\src\\redux\\reducers\\index.js",["137"],"import { combineReducers, Reducer } from \"redux\";\r\nimport TestReducer from \"./test.reducer\";\r\nimport OnboardingReducer from \"./onboarding.reducer\";\r\nimport BreakReducer from \"./break.reducer\";\r\nimport PastReducer from \"./past.reducer\";\r\n\r\n\r\nconst allReducers = {\r\n  onboarding: OnboardingReducer,\r\n  test: TestReducer,\r\n  break: BreakReducer,\r\n  past: PastReducer,\r\n};\r\n\r\nconst rootReducer = combineReducers({ ...allReducers });\r\n\r\nexport default rootReducer;\r\n",["138","139"],"C:\\code\\mit\\RL_app\\src\\redux\\reducers\\break.reducer.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\PersonalInformation.jsx",["140","141","142"],"C:\\code\\mit\\RL_app\\src\\components\\Games\\fruit_ninja_manager.jsx",["143"],"C:\\code\\mit\\RL_app\\src\\screens\\CBTestScreen\\index.jsx",["144","145","146","147"],"C:\\code\\mit\\RL_app\\src\\navigation\\index.js",["148","149","150","151"],"C:\\code\\mit\\RL_app\\src\\redux\\types\\onboarding.types.js",[],"C:\\code\\mit\\RL_app\\src\\redux\\reducers\\onboarding.reducer.js",[],"C:\\code\\mit\\RL_app\\src\\redux\\actions\\onboarding.action.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\AWCheckerScreen\\index.jsx",["152","153","154","155"],"import React, { useEffect, useState } from \"react\";\r\nimport { OnboardingActions } from \"../../redux/actions\";\r\nimport { Button } from \"antd\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport BreakManager from \"../../breakmanager\";\r\nimport { AWClientService } from \"../../services\";\r\nimport AWError from \"../../assets/awerror.png\";\r\nimport AWFull from \"../../assets/awfull.png\";\r\nimport AWscreen from \"../../assets/awscreen.png\";\r\n\r\nimport \"./styles.css\";\r\nvar shell = window.require(\"electron\").shell;\r\nlet client = new AWClientService();\r\n\r\nconst AWCheckerScreen = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    awcheck();\r\n  }, []);\r\n\r\n  const awcheck = async () => {\r\n    // props.awChecked();\r\n    // history.push(\"/\");\r\n    try {\r\n      let resp = await client.getAppTotals();\r\n      if (Object.keys(resp).length > 0) {\r\n        props.awChecked();\r\n        if (props.onboarding.complete) {\r\n          BreakManager(history);\r\n          history.push(\"/home\");\r\n        } else {\r\n          history.push(\"/cbt\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <h3 style={{ textAlign: \"center\" }}>\r\n          Checking if you have activity watch\r\n        </h3>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          width: \"100%\",\r\n          padding: \"5%\",\r\n        }}\r\n      >\r\n        <h3 style={{ textAlign: \"center\" }}>\r\n          You need to install and turn on activity watch! Please hit refresh\r\n          after installing and turning on activity watch\r\n        </h3>\r\n        <h4>How to install activity watch:</h4>\r\n        <p>\r\n          1. Download the latest version of activity watch by clicking here.\r\n        </p>\r\n        <p\r\n          className=\"linktext\"\r\n          style={{ color: \"blue\" }}\r\n          onClick={() => {\r\n            shell.openExternal(\r\n              \"https://github.com/ActivityWatch/activitywatch/releases/download/v0.10.0/activitywatch-v0.10.0-macos-x86_64.dmg\"\r\n            );\r\n          }}\r\n        >\r\n          1.1 : For Mac users\r\n        </p>\r\n        <p\r\n          className=\"linktext\"\r\n          style={{ color: \"blue\" }}\r\n          onClick={() => {\r\n            shell.openExternal(\r\n              \"https://activitywatch.net/downloads/\"\r\n            );\r\n          }}\r\n        >\r\n          1.2 : For Windows users\r\n        </p>\r\n        <p\r\n          className=\"linktext\"\r\n          style={{ color: \"blue\" }}\r\n          onClick={() => {\r\n            shell.openExternal(\r\n              \"https://docs.activitywatch.net/en/latest/getting-started.html#installation\"\r\n            );\r\n          }}\r\n        >\r\n          2. Click here and follow the instructions to install activity watch.\r\n        </p>\r\n        <p>\r\n          3. After installing , launch activity watch. You may encounter the\r\n          following error :\r\n        </p>\r\n        <img src={AWError} width=\"350px\" height=\"200px\" />\r\n        <p>If you do see this error then follow these instructions :</p>\r\n        <p>\r\n          3.1 : Go in \"System Preferences / Security & Privacy / General\":\r\n          you'll see text close to the bottom of the window mentioning the\r\n          offending file and a button to allow execution\r\n        </p>\r\n        <p>3.2 : Click the \"Allow\" button in the Security & Privacy window</p>\r\n        <p>3.3 : Close and restart activity watch</p>\r\n        <p\r\n          className=\"linktext\"\r\n          style={{ color: \"blue\" }}\r\n          onClick={() => {\r\n            shell.openExternal(\r\n              \"https://chrome.google.com/webstore/detail/activitywatch-web-watcher/nglaklhklhcoonedhgnpgddginnjdadi\"\r\n            );\r\n          }}\r\n        >\r\n          4. Install activity watch chrome extension by clicking here\r\n        </p>\r\n        <p>5. You will see a small activty watch logo in your tray : </p>\r\n        <img src={AWFull} width=\"100px\" height=\"100px\" />\r\n        <p>6. You have successfully installed activity watch.</p>\r\n        <p\r\n          className=\"linktext\"\r\n          style={{ color: \"blue\" }}\r\n          onClick={() => {\r\n            shell.openExternal(\"http://localhost:5600\");\r\n          }}\r\n        >\r\n          7. To make sure Activity Watch is running please click here and verify\r\n          you see the following page :\r\n        </p>\r\n        <img src={AWscreen} width=\"500px\" height=\"300px\" />\r\n        <p>\r\n          7.1 : If you do not see the screen above, please launch activity watch\r\n          from launchpad and click on the link above again. Once you see the\r\n          screen above hit refresh to continue.\r\n        </p>\r\n        <Button\r\n          onClick={() => {\r\n            setLoading(true);\r\n            awcheck();\r\n          }}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { onboarding: state.onboarding };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators({ awChecked: OnboardingActions.awChecked }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AWCheckerScreen);\r\n","C:\\code\\mit\\RL_app\\src\\screens\\WeeklyForm\\index.jsx",["156","157","158","159","160"],"C:\\code\\mit\\RL_app\\src\\breakmanager\\weeklyChecker.js",["161","162"],"C:\\code\\mit\\RL_app\\src\\breakmanager\\EventHandler\\index.js",["163","164"],"import { BreakActions, PastActions } from \"../../redux/actions\";\r\nimport { store } from \"../../redux\";\r\nvar electron = window.require(\"electron\");\r\nvar curWindow = electron.remote.getCurrentWindow();\r\nconst isDev = window.require(\"electron-is-dev\");\r\nconst path = window.require(\"path\");\r\n\r\n//handles window and route changes when break-state changes\r\nexport default function eventHandler(history) {\r\n  //sets screen back to normal if no break\r\n  if (\r\n    store.getState().break.breakState === \"no-break\" &&\r\n    !store.getState().break.windowChanged\r\n  ) {\r\n    curWindow.setOpacity(1);\r\n    curWindow.unmaximize();\r\n    curWindow.setSize(1400, 800);\r\n    curWindow.minimize();\r\n    history.push(\"/\");\r\n    store.dispatch(BreakActions.setWindowChanged());\r\n    curWindow.setAlwaysOnTop(false);\r\n    curWindow.reload();\r\n  }\r\n\r\n  //sets screen to popup window size if break-popup\r\n  else if (\r\n    store.getState().break.breakState === \"break-popup\" &&\r\n    !store.getState().break.windowChanged\r\n  ) {\r\n    curWindow.setAlwaysOnTop(true, \"pop-up-menu\");\r\n    curWindow.restore();\r\n    history.push(\"/popup\");\r\n    //curWindow.maximize()\r\n    curWindow.unmaximize();\r\n    curWindow.setSize(1000, 800);\r\n    curWindow.center();\r\n\r\n    store.dispatch(BreakActions.setWindowChanged());\r\n  } else if (store.getState().break.breakState === \"pre-break-feedback\") {\r\n    history.push(\"/prefeedback\");\r\n    curWindow.center();\r\n  } else if (store.getState().break.breakState === \"break-stroop\") {\r\n    history.push(\"/stroop\");\r\n    curWindow.center();\r\n  } else if (store.getState().break.breakState === \"break-fruit\") {\r\n    curWindow.unmaximize();\r\n    curWindow.setSize(1000, 800);\r\n    curWindow.setOpacity(1);\r\n    curWindow.center();\r\n\r\n    curWindow.setMovable(true);\r\n    history.push(\"/fruit\");\r\n  } else if (store.getState().break.breakState === \"break-feedback\") {\r\n    curWindow.maximize();\r\n    curWindow.setAlwaysOnTop(false);\r\n    history.push(\"/feedback\");\r\n  }\r\n\r\n  //sets window to full screen if break, and also ends the break after break time is over\r\n  else if (\r\n    store.getState().break.breakState === \"break\" &&\r\n    !store.getState().break.windowChanged\r\n  ) {\r\n    curWindow.setOpacity(0.8);\r\n    curWindow.maximize();\r\n    curWindow.setAlwaysOnTop(true);\r\n\r\n    history.push(\"/break\");\r\n    store.dispatch(BreakActions.setWindowChanged());\r\n    let s1 = store.getState().break.breakStartTime;\r\n    setTimeout(() => {\r\n      if (\r\n        store.getState().break.breakState === \"break\" &&\r\n        s1 === store.getState().break.breakStartTime\r\n      ) {\r\n        store.dispatch(BreakActions.startFruit());\r\n      }\r\n    }, store.getState().break.breakDuration * 1000);\r\n  } else if (store.getState().onboarding.weeklyRem) {\r\n    curWindow.restore();\r\n    history.push(\"/weekpop\");\r\n    //curWindow.maximize()\r\n    curWindow.unmaximize();\r\n    curWindow.setSize(1000, 800);\r\n    curWindow.center();\r\n    setTimeout(() => {\r\n      store.dispatch(PastActions.setWeeklyRem(false));\r\n      history.push(\"/home\");\r\n    }, 60000);\r\n  }\r\n}\r\n","C:\\code\\mit\\RL_app\\src\\breakmanager\\Checker\\activityrule.break.js",["165"],"import { BreakActions, PastActions } from \"../../redux/actions\";\r\nimport { store } from \"../../redux\";\r\nimport { AWClientService } from \"../../services\";\r\nimport psl from \"psl\";\r\nlet client = new AWClientService();\r\n\r\n//TO DO: CONNECT WITH ACTUAL USER SETTINGS. Currently hardcoded for Facebook continuous usage above 20 seconds\r\n//TO DO: SIMILAR CHECK FOR CUMULATIVE USAGE\r\n\r\n//checks whether activity rule break is to be triggered\r\nexport default function checkActivityRuleBreak() {\r\n  client\r\n    .getAppTotals()\r\n    .then((allValues) => {\r\n      let onboardingProps = store.getState().onboarding;\r\n      const activityBreaks = onboardingProps.allOverRides;\r\n      const websiteTotals = allValues.websiteTotals;\r\n      const websiteTotalsUnmerged = allValues.websiteTotalsUnmerged;\r\n      for (let indBreak of activityBreaks) {\r\n        if (indBreak.url.length > 0) {\r\n          let totalUsage = 0;\r\n          let tempUrl = indBreak.url.replace(/^\\/\\/|^.*?:(\\/\\/)?/, \"\");\r\n          tempUrl = tempUrl.replace(/\\/+$/, \"\");\r\n          let parsed = psl.parse(tempUrl);\r\n          let siteName = parsed.sld;\r\n          if (siteName === \"google\" && parsed.subdomain !== \"www\") {\r\n            siteName = parsed.subdomain;\r\n          }\r\n          let preGame = Math.ceil(totalUsage / (60 * indBreak.interval));\r\n          let initScheduled = store.getState().past.initScheduled;\r\n          let today = store.getState().past.initScheduled;\r\n          if (today.length === 0) {\r\n            today = new Date();\r\n            store.dispatch(PastActions.setToday(today.toISOString()));\r\n          } else {\r\n            today = new Date(today);\r\n          }\r\n          if (\r\n            today.getDate() !== new Date().getDate() ||\r\n            today.getMonth() !== new Date().getMonth()\r\n          ) {\r\n            today = new Date();\r\n            store.dispatch(PastActions.setToday(today.toISOString()));\r\n          } else {\r\n            initScheduled[indBreak.url] = preGame;\r\n          }\r\n          if (initScheduled[indBreak.url]) {\r\n            preGame = initScheduled[indBreak.url];\r\n          }\r\n\r\n          initScheduled[indBreak.url] = preGame;\r\n          store.dispatch(PastActions.saveInitBreakData(initScheduled));\r\n          if (indBreak.cumulative) {\r\n            websiteTotals.map((ob, index) => {\r\n              if (\r\n                siteName.length > 0 &&\r\n                ob.data.url.includes(siteName) &&\r\n                !(store.getState().break.breakState === \"break\") &&\r\n                !(store.getState().break.breakState === \"break-feedback\") &&\r\n                !(store.getState().break.breakState === \"break-popup\") &&\r\n                !(store.getState().break.breakState === \"break-stroop\") &&\r\n                !(store.getState().break.breakState === \"break-fruit\") &&\r\n                !(store.getState().break.breakState === \"cancel-break\") &&\r\n                !(store.getState().break.breakState === \"pre-break-feedback\")\r\n              ) {\r\n                totalUsage = totalUsage + ob.duration;\r\n              }\r\n            });\r\n\r\n            if (preGame === 0) {\r\n              if (totalUsage / 60 > indBreak.interval && totalUsage > 0) {\r\n                initScheduled[indBreak.url] += 1;\r\n\r\n                store.dispatch(PastActions.saveInitBreakData(initScheduled));\r\n                let timeNow = new Date().toISOString();\r\n\r\n                let breakData = {\r\n                  breakType: \"activity-rule (continuous)\",\r\n                  breakDescription: indBreak.name,\r\n                  breakDuration: indBreak.breakLength * 60,\r\n                  breakStartTime: timeNow,\r\n                };\r\n                store.dispatch(BreakActions.startPopup(timeNow, breakData));\r\n                setTimeout(() => {\r\n                  if (\r\n                    store.getState().break.breakState === \"break-popup\" &&\r\n                    store.getState().break.popupStartTime === timeNow\r\n                  ) {\r\n                    store.dispatch(BreakActions.startPrebreakfeedback());\r\n                  }\r\n                }, 10000);\r\n              }\r\n            } else {\r\n              if (\r\n                totalUsage / 60 > indBreak.interval * preGame &&\r\n                totalUsage > 0\r\n              ) {\r\n                initScheduled[indBreak.url] += 1;\r\n\r\n                store.dispatch(PastActions.saveInitBreakData(initScheduled));\r\n                let timeNow = new Date().toISOString();\r\n\r\n                let breakData = {\r\n                  breakType: \"activity-rule (cumulative)\",\r\n                  breakDescription: indBreak.name,\r\n                  breakDuration: indBreak.breakLength * 60,\r\n                  breakStartTime: timeNow,\r\n                };\r\n                store.dispatch(BreakActions.startPopup(timeNow, breakData));\r\n                setTimeout(() => {\r\n                  if (\r\n                    store.getState().break.breakState === \"break-popup\" &&\r\n                    store.getState().break.popupStartTime === timeNow\r\n                  ) {\r\n                    store.dispatch(BreakActions.startPrebreakfeedback());\r\n                  }\r\n                }, 10000);\r\n              }\r\n            }\r\n          } else {\r\n            let lastVal =\r\n              websiteTotalsUnmerged[websiteTotalsUnmerged.length - 1];\r\n            if (lastVal.data.url.includes(siteName)) {\r\n              for (let i = websiteTotalsUnmerged.length - 1; i > 0; i--) {\r\n                if (\r\n                  siteName.length > 0 &&\r\n                  websiteTotalsUnmerged[i].data.url.includes(siteName) &&\r\n                  !(store.getState().break.breakState === \"break\") &&\r\n                  !(store.getState().break.breakState === \"break-feedback\") &&\r\n                  !(store.getState().break.breakState === \"break-popup\") &&\r\n                  !(store.getState().break.breakState === \"break-stroop\") &&\r\n                  !(store.getState().break.breakState === \"break-fruit\") &&\r\n                  !(store.getState().break.breakState === \"cancel-break\") &&\r\n                  !(store.getState().break.breakState === \"pre-break-feedback\")\r\n                ) {\r\n                  totalUsage = totalUsage + websiteTotalsUnmerged[i].duration;\r\n                } else {\r\n                  break;\r\n                }\r\n              }\r\n              if (lastVal.id !== store.getState().past.takenId) {\r\n                if (totalUsage / 60 > indBreak.interval && totalUsage > 0) {\r\n                  initScheduled[indBreak.url] += 1;\r\n\r\n                  store.dispatch(PastActions.saveInitBreakData(initScheduled));\r\n                  let timeNow = new Date().toISOString();\r\n\r\n                  let breakData = {\r\n                    breakType: \"activity-rule (non-cumulative)\",\r\n                    breakDescription: indBreak.name,\r\n                    breakDuration: indBreak.breakLength * 60,\r\n                    breakStartTime: timeNow,\r\n                  };\r\n                  store.dispatch(BreakActions.startPopup(timeNow, breakData));\r\n                  store.dispatch(PastActions.setTakenId(lastVal.id));\r\n                  setTimeout(() => {\r\n                    if (\r\n                      store.getState().break.breakState === \"break-popup\" &&\r\n                      store.getState().break.popupStartTime === timeNow\r\n                    ) {\r\n                      store.dispatch(BreakActions.startPrebreakfeedback());\r\n                    }\r\n                  }, 10000);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(console.log);\r\n}\r\n",["166","167"],"C:\\code\\mit\\RL_app\\src\\services\\index.js",[],"C:\\code\\mit\\RL_app\\src\\components\\Toolbar.js",["168","169","170"],"C:\\code\\mit\\RL_app\\src\\App.js",["171","172"],"import React, { useEffect } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter, useHistory } from \"react-router-dom\";\r\nimport BreakManager from \"./breakmanager\";\r\n\r\n\r\nimport { store } from \"./redux\";\r\nimport Main from \"./navigation\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n\r\nfunction App() {\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    \r\n  }, []);\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <Main />\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["173","174"],"C:\\code\\mit\\RL_app\\src\\redux\\store.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\EditActivityBreaksScreen\\index.jsx",["175","176","177","178","179"],"C:\\code\\mit\\RL_app\\src\\components\\Games\\index.jsx",["180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"C:\\code\\mit\\RL_app\\src\\screens\\OnboardingScreen\\AdHocBreaks.jsx",["200","201","202","203","204"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Input, Menu, Dropdown, Button, Modal, message, Checkbox } from \"antd\";\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\n\r\nimport { OnboardingActions } from \"../../redux/actions\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst AdHocBreakScreen = (props) => {\r\n  const [siteName, setSiteName] = useState(\"\");\r\n  const [siteUrl, setSiteUrl] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [sites, setSites] = useState([\r\n    { name: \"Youtube\", url: \"https://www.youtube.com\", key: \"1\" },\r\n  ]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    setSiteName(\"\");\r\n    setSiteUrl(\"\");\r\n  };\r\n\r\n  const menu = (mainIndex) => (\r\n    <Menu\r\n      onClick={({ key }) => {\r\n        if (key === (props.onboarding.overRideSites.length + 1).toString()) {\r\n          setIsModalVisible(true);\r\n        } else {\r\n          let keyInt = parseInt(key);\r\n          let tempArray = props.onboarding.allOverRides;\r\n          let tempObj = tempArray[mainIndex];\r\n          let siteObject = props.onboarding.overRideSites[keyInt - 1];\r\n          tempObj.name = siteObject.name;\r\n          tempObj.url = siteObject.url;\r\n          tempArray[mainIndex] = tempObj;\r\n          props.setAllOverrides(tempArray);\r\n        }\r\n      }}\r\n    >\r\n      {props.onboarding.overRideSites.map((item, index) => {\r\n        return <Menu.Item key={item.key}>{item.name}</Menu.Item>;\r\n      })}\r\n      <Menu.Item key={(props.onboarding.overRideSites.length + 1).toString()}>\r\n        +ADD ANOTHER\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const Capitalize = (str) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"step-container\" style={{ marginBottom: \"10px\" }}>\r\n      <Modal\r\n        title=\"\"\r\n        visible={isModalVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        centered\r\n        footer={null}\r\n        width={700}\r\n      >\r\n        <div style={{ margin: \"7%\" }}>\r\n          <h2>Add a Site</h2>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Input\r\n              size=\"large\"\r\n              style={{\r\n                width: \"45%\",\r\n                borderRadius: 5,\r\n                verticalAlign: \"center\",\r\n                marginRight: \"2.5%\",\r\n              }}\r\n              placeholder=\"Site Name\"\r\n              value={siteName}\r\n              onChange={(e) => {\r\n                setSiteName(e.target.value);\r\n              }}\r\n            />\r\n            <Input\r\n              size=\"large\"\r\n              style={{\r\n                width: \"45%\",\r\n                borderRadius: 5,\r\n                verticalAlign: \"center\",\r\n                marginLeft: \"2.5%\",\r\n              }}\r\n              placeholder=\"Site URL\"\r\n              value={siteUrl}\r\n              onChange={(e) => {\r\n                setSiteUrl(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n              marginTop: \"8%\",\r\n            }}\r\n          >\r\n            <Button\r\n              style={{ marginRight: \"2.5%\" }}\r\n              onClick={() => {\r\n                setIsModalVisible(false);\r\n              }}\r\n            >\r\n              CANCEL\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              style={{ marginLeft: \"2.5%\" }}\r\n              onClick={() => {\r\n                let key = (\r\n                  props.onboarding.overRideSites.length + 1\r\n                ).toString();\r\n                let tempArray = props.onboarding.overRideSites;\r\n                let finalSiteName = Capitalize(siteName);\r\n                tempArray.push({ url: siteUrl, name: finalSiteName, key });\r\n                props.setOverrideSites(tempArray);\r\n                setIsModalVisible(false);\r\n              }}\r\n            >\r\n              ADD SITE\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      <h1>Activity Based Breaks</h1>\r\n\r\n      <div style={{ marginTop: \"2%\" }}>\r\n        <p style={{ fontSize: \"15px\", color: \"#696969\", width: \"80%\" }}>\r\n          This section is to set up any specific breaks that you want to take.\r\n          For example you can set the app up to start some breaks every time you\r\n          open a specific app like Facebook.\r\n        </p>\r\n        <div\r\n          style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"1%\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <p style={{ flex: 2, fontSize: \"18px\" }}>Site Name</p>\r\n            <p style={{ flex: 1, fontSize: \"18px\" }}>After Every</p>\r\n            <p style={{ flex: 1, fontSize: \"18px\" }}>take a Break For</p>\r\n            <p style={{ flex: 1, fontSize: \"18px\" }}></p>\r\n          </div>\r\n          {props.onboarding.allOverRides.map((item, index) => {\r\n            return (\r\n              <div style={{ marginTop: \"1%\" }}>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    alignItems: \"center\",\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  <div style={{ flex: 2 }}>\r\n                    <Dropdown overlay={menu(index)} trigger={[\"click\"]}>\r\n                      <Button\r\n                        size=\"large\"\r\n                        style={{\r\n                          borderRadius: 5,\r\n                          width: \"80%\",\r\n                        }}\r\n                      >\r\n                        {item.name.length !== 0 ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              justifyContent: \"space-between\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            {item.name}\r\n                            <DownOutlined style={{ fontSize: \"13px\" }} />\r\n                          </div>\r\n                        ) : (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              justifyContent: \"space-between\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            Select Site\r\n                            <DownOutlined style={{ fontSize: \"13px\" }} />\r\n                          </div>\r\n                        )}\r\n                      </Button>\r\n                    </Dropdown>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      flex: 1,\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Input\r\n                      size=\"large\"\r\n                      style={{\r\n                        borderRadius: 5,\r\n                        verticalAlign: \"center\",\r\n                        width: \"45%\",\r\n                      }}\r\n                      placeholder=\"First Name\"\r\n                      type=\"number\"\r\n                      value={item.interval}\r\n                      onChange={(e) => {\r\n                        if (e.target.value > 0 && e.target.value < 61) {\r\n                          let tempArray = props.onboarding.allOverRides;\r\n                          let tempObj = tempArray[index];\r\n                          tempObj.interval = e.target.value;\r\n                          tempArray[index] = tempObj;\r\n                          props.setAllOverrides(tempArray);\r\n                        }\r\n                      }}\r\n                    />\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\",\r\n                        height: \"100%\",\r\n                      }}\r\n                    >\r\n                      <p\r\n                        style={{\r\n                          paddingTop: \"20%\",\r\n                          marginLeft: \"7%\",\r\n                          fontSize: \"15px\",\r\n                          flex: 1,\r\n                          height: \"100%\",\r\n                        }}\r\n                      >\r\n                        minutes\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      flex: 1,\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Input\r\n                      size=\"large\"\r\n                      style={{\r\n                        borderRadius: 5,\r\n                        verticalAlign: \"center\",\r\n                        width: \"45%\",\r\n                      }}\r\n                      placeholder=\"First Name\"\r\n                      type=\"number\"\r\n                      value={item.breakLength}\r\n                      onChange={(e) => {\r\n                        if (e.target.value > 0) {\r\n                          let tempArray = props.onboarding.allOverRides;\r\n                          let tempObj = tempArray[index];\r\n                          tempObj.breakLength = e.target.value;\r\n                          tempArray[index] = tempObj;\r\n                          props.setAllOverrides(tempArray);\r\n                        }\r\n                      }}\r\n                    />\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\",\r\n                        height: \"100%\",\r\n                      }}\r\n                    >\r\n                      <p\r\n                        style={{\r\n                          paddingTop: \"20%\",\r\n                          marginLeft: \"7%\",\r\n                          fontSize: \"15px\",\r\n                          flex: 1,\r\n                          height: \"100%\",\r\n                        }}\r\n                      >\r\n                        minutes\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      flex: 1,\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Checkbox\r\n                      checked={item.cumulative}\r\n                      onChange={(e) => {\r\n                        let tempArray = props.onboarding.allOverRides;\r\n                        let tempObj = tempArray[index];\r\n                        tempObj.cumulative = e.target.checked;\r\n                        tempArray[index] = tempObj;\r\n                        props.setAllOverrides(tempArray);\r\n                      }}\r\n                    />\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\",\r\n                        height: \"100%\",\r\n                      }}\r\n                    >\r\n                      <p\r\n                        style={{\r\n                          paddingTop: \"20%\",\r\n                          marginLeft: \"7%\",\r\n                          fontSize: \"15px\",\r\n                          flex: 1,\r\n                          height: \"100%\",\r\n                        }}\r\n                      >\r\n                        Cumulative\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <p\r\n            style={{\r\n              textDecorationLine: \"underline\",\r\n              marginTop: \"2%\",\r\n              fontSize: \"17px\",\r\n              cursor: \"pointer\",\r\n              width: \"15%\",\r\n            }}\r\n            onClick={() => {\r\n              let tempArray = props.onboarding.allOverRides;\r\n              tempArray.push({\r\n                name: \"\",\r\n                url: \"\",\r\n                interval: 60,\r\n                breakLength: 1,\r\n              });\r\n              props.setAllOverrides(tempArray);\r\n            }}\r\n          >\r\n            +Add Override\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { onboarding: state.onboarding };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      setAllOverrides: OnboardingActions.setAllOverrides,\r\n      setOverrideSites: OnboardingActions.setOverrideSites,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AdHocBreakScreen);\r\n",["205","206"],"C:\\code\\mit\\RL_app\\src\\breakmanager\\Checker\\index.js",[],"C:\\code\\mit\\RL_app\\src\\components\\Timer.js",[],"C:\\code\\mit\\RL_app\\src\\reportWebVitals.js",[],"C:\\code\\mit\\RL_app\\src\\screens\\EditScheduledBreaks\\index.jsx",["207","208"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { TimePicker, Select, Button } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { OnboardingActions } from \"../../redux/actions\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditScheduledBreakScreen = (props) => {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"step-container\" style={{ padding: \"5%\" }}>\r\n      <h1>Scheduled Breaks</h1>\r\n\r\n      <div style={{ marginTop: \"4%\" }}>\r\n        <p style={{ fontSize: \"17px\" }}>\r\n          Are there any breaks you would like to schedule on a regular basis?\r\n        </p>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          width: \"50%\",\r\n        }}\r\n      >\r\n        <p style={{ flex: 1 }}>Day</p>\r\n        <p style={{ flex: 1 }}>Start Time</p>\r\n        <p style={{ flex: 1 }}>End Time</p>\r\n      </div>\r\n      <div>\r\n        {props.onboarding.tempScheduledBreaks.map((item, index) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-between\",\r\n                width: \"50%\",\r\n                marginTop: index !== 0 ? \"1%\" : \"0%\",\r\n              }}\r\n            >\r\n              <Select\r\n                style={{ flex: 1 }}\r\n                placeholder=\"Select a day\"\r\n                onChange={(value) => {\r\n                  const tempObject = item;\r\n                  tempObject.day = value;\r\n                  const tempArray = props.onboarding.tempScheduledBreaks;\r\n                  tempArray[index] = tempObject;\r\n                  props.addTempSched(tempArray);\r\n                }}\r\n                defaultValue={item.day.length !== 0 ? item.day : null}\r\n              >\r\n                <Option value=\"monday\">Monday</Option>\r\n                <Option value=\"tuesday\">Tuesday</Option>\r\n                <Option value=\"wednesday\">Wednesday</Option>\r\n                <Option value=\"thursday\">Thursday</Option>\r\n                <Option value=\"friday\">Friday</Option>\r\n                <Option value=\"saturday\">Saturday</Option>\r\n                <Option value=\"sunday\">Sunday</Option>\r\n              </Select>\r\n              <TimePicker\r\n                format={\"HH:mm\"}\r\n                style={{ flex: 1 }}\r\n                value={item.start.length !== 0 ? moment(item.start) : null}\r\n                onChange={(e) => {\r\n                  const time = e.toString();\r\n                  const tempObject = item;\r\n                  tempObject.start = time;\r\n                  const tempArray = props.onboarding.tempScheduledBreaks;\r\n                  tempArray[index] = tempObject;\r\n                  props.addTempSched(tempArray);\r\n                }}\r\n                onSelect={(e) => {\r\n                  const time = e.toString();\r\n                  const tempObject = item;\r\n                  tempObject.start = time;\r\n                  const tempArray = props.onboarding.tempScheduledBreaks;\r\n                  tempArray[index] = tempObject;\r\n                  props.addTempSched(tempArray);\r\n                }}\r\n              />\r\n              <TimePicker\r\n                format={\"HH:mm\"}\r\n                style={{ flex: 1 }}\r\n                value={item.end.length !== 0 ? moment(item.end) : null}\r\n                onChange={(e) => {\r\n                  const time = e.toString();\r\n                  const tempObject = item;\r\n                  tempObject.end = time;\r\n                  const tempArray = props.onboarding.tempScheduledBreaks;\r\n                  tempArray[index] = tempObject;\r\n                  props.addTempSched(tempArray);\r\n                }}\r\n                onSelect={(e) => {\r\n                  const time = e.toString();\r\n                  const tempObject = item;\r\n                  tempObject.end = time;\r\n                  const tempArray = props.onboarding.tempScheduledBreaks;\r\n                  tempArray[index] = tempObject;\r\n                  props.addTempSched(tempArray);\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <p\r\n        style={{\r\n          textDecorationLine: \"underline\",\r\n          marginTop: \"2%\",\r\n          fontSize: \"17px\",\r\n          cursor: \"pointer\",\r\n          width: \"15%\",\r\n        }}\r\n        onClick={() => {\r\n          let tempArray = props.onboarding.tempScheduledBreaks;\r\n          tempArray.push({ start: \"\", end: \"\", day: \"\" });\r\n          props.addTempSched(tempArray);\r\n        }}\r\n      >\r\n        +Add a Break\r\n      </p>\r\n      <Button\r\n        onClick={() => {\r\n          history.push(\"/home\");\r\n        }}\r\n      >\r\n        Cancel\r\n      </Button>\r\n      <Button\r\n        onClick={async () => {\r\n          let body = {\r\n            scheduledBreaks: props.onboarding.tempScheduledBreaks,\r\n            user: props.onboarding.user._id,\r\n          };\r\n          let response = await axios.post(\r\n            \"https://thepallab.com/api/user/update-onb\",\r\n            body\r\n          );\r\n          if (response.data.message === \"Successful Update\") {\r\n            props.setScheduledBreaks(props.onboarding.tempScheduledBreaks);\r\n            history.push(\"/home\");\r\n          }\r\n        }}\r\n      >\r\n        Update Scheduled Breaks\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { onboarding: state.onboarding };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      setScheduledBreaks: OnboardingActions.setScheduledBreaks,\r\n      addTempSched: OnboardingActions.addTempSched,\r\n      setScreenTime: OnboardingActions.setScreenTime,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(EditScheduledBreakScreen);\r\n","C:\\code\\mit\\RL_app\\src\\components\\Games\\stroop_test\\index.jsx",["209","210","211","212","213","214","215","216","217","218"],"import React from \"react\";\r\nimport Stroop from \"@orcatech/react-neuropsych-stroop\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\n\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nfunction StroopTest(props) {\r\n  const [count, setCount] = useState({\r\n    total: 0,\r\n    score: {\r\n      times: [],\r\n      score: 0,\r\n    },\r\n    lastResult: \"\",\r\n    words: [],\r\n    colors: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    let tempcount = { ...count };\r\n    let now = new Date();\r\n    tempcount.score.times.push(now);\r\n    setCount(tempcount);\r\n  }, []);\r\n\r\n  if (count.colors.length == 0) {\r\n    var words = [\r\n      \"purple\",\r\n      \"black\",\r\n      \"green\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"orange\",\r\n      \"pink\",\r\n      \"yellow\",\r\n    ];\r\n    var words2 = [...words];\r\n    var colors = [\r\n      \"9370D8\",\r\n      \"000000\",\r\n      \"009900\",\r\n      \"ff0000\",\r\n      \"000099\",\r\n      \"EE7600\",\r\n      \"FF69B4\",\r\n      \"FFFF00\",\r\n    ];\r\n    var colors2 = [...colors];\r\n\r\n    words2 = words.slice(0, props.len || 4);\r\n    colors2 = colors.slice(0, props.len || 4);\r\n\r\n    words = [...words2];\r\n    colors = [...colors];\r\n\r\n    shuffleArray(words2);\r\n    colors2 = [];\r\n    words2.forEach((word) => {\r\n      colors2.push(colors[words.indexOf(word)]);\r\n    });\r\n\r\n    setCount({ ...count, words: words2, colors: colors2 });\r\n  }\r\n\r\n  var words = count.words;\r\n  var colors = count.colors;\r\n\r\n  const combos = [\r\n    {\r\n      word: Math.floor(Math.random() * words.length),\r\n      color: Math.floor(Math.random() * words.length),\r\n    },\r\n  ];\r\n\r\n  var onComplete = (data) => {\r\n    // handle test completion\r\n    const { errors, successes, begin, finish, timeLimitReached } = data;\r\n    //setCount({ ...count, total: count.total + 1 })\r\n  };\r\n\r\n  var onSuccess = (data) => {\r\n    let tempcount = { ...count };\r\n    let now = new Date();\r\n    tempcount.score.times.push(now);\r\n    tempcount.score.score = tempcount.score.score + 1;\r\n    setCount({\r\n      ...count,\r\n      total: count.total + 1,\r\n      score: tempcount.score,\r\n      lastResult: \"Correct!\",\r\n    });\r\n    // handle each success that occurs\r\n  };\r\n\r\n  var onError = (data) => {\r\n    let tempcount = { ...count };\r\n    let now = new Date();\r\n    tempcount.score.times.push(now);\r\n    setCount({\r\n      ...count,\r\n      total: count.total + 1,\r\n      score: tempcount.score,\r\n      lastResult: \"Wrong!\",\r\n    });\r\n    // handle each error that occurs\r\n  };\r\n  if (count.total == 3) {\r\n    props.onComplete(count.score);\r\n    return <>Test completed. The score is {count.score.score}</>;\r\n  }\r\n  return (\r\n    <div\r\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\r\n      key={count.total}\r\n    >\r\n      <div>Question {count.total + 1}</div>\r\n      <CountdownCircleTimer\r\n        onComplete={() => {\r\n          setCount({\r\n            ...count,\r\n            total: count.total + 1,\r\n            lastResult: \"Out of time!\",\r\n          });\r\n        }}\r\n        isPlaying\r\n        duration={10}\r\n        size={100}\r\n        colors=\"#000000\"\r\n        strokeWidth={6}\r\n      >\r\n        {({ remainingTime }) => remainingTime}\r\n      </CountdownCircleTimer>\r\n\r\n      <Stroop\r\n        buttonsPerRow={words.length / 2}\r\n        colors={colors}\r\n        combos={combos}\r\n        onComplete={onComplete}\r\n        onError={onError}\r\n        onSuccess={onSuccess}\r\n        words={words}\r\n        incorrectMessage=\"Incorrect!\"\r\n        completionMessage=\"Out of time!\"\r\n        timeLimit={30000}\r\n      />\r\n      <div>{count.lastResult}</div>\r\n      <div>{count.score.score}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StroopTest;\r\n","C:\\code\\mit\\RL_app\\src\\screens\\WeeklyPopUp\\index.jsx",["219","220","221","222","223","224","225","226","227"],"C:\\code\\mit\\RL_app\\src\\redux\\types\\index.js",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":1,"column":27,"nodeType":"234","messageId":"235","endLine":1,"endColumn":34},{"ruleId":"228","replacedBy":"236"},{"ruleId":"230","replacedBy":"237"},{"ruleId":"232","severity":1,"message":"238","line":15,"column":10,"nodeType":"234","messageId":"235","endLine":15,"endColumn":17},{"ruleId":"232","severity":1,"message":"239","line":15,"column":19,"nodeType":"234","messageId":"235","endLine":15,"endColumn":29},{"ruleId":"232","severity":1,"message":"240","line":19,"column":9,"nodeType":"234","messageId":"235","endLine":19,"endColumn":18},{"ruleId":"232","severity":1,"message":"241","line":1,"column":10,"nodeType":"234","messageId":"235","endLine":1,"endColumn":16},{"ruleId":"232","severity":1,"message":"242","line":2,"column":10,"nodeType":"234","messageId":"235","endLine":2,"endColumn":22},{"ruleId":"232","severity":1,"message":"243","line":3,"column":25,"nodeType":"234","messageId":"235","endLine":3,"endColumn":32},{"ruleId":"232","severity":1,"message":"244","line":8,"column":9,"nodeType":"234","messageId":"235","endLine":8,"endColumn":17},{"ruleId":"245","severity":1,"message":"246","line":27,"column":7,"nodeType":"247","endLine":27,"endColumn":78},{"ruleId":"232","severity":1,"message":"248","line":7,"column":10,"nodeType":"234","messageId":"235","endLine":7,"endColumn":18},{"ruleId":"232","severity":1,"message":"249","line":8,"column":22,"nodeType":"234","messageId":"235","endLine":8,"endColumn":28},{"ruleId":"232","severity":1,"message":"250","line":10,"column":7,"nodeType":"234","messageId":"235","endLine":10,"endColumn":17},{"ruleId":"251","severity":1,"message":"252","line":68,"column":6,"nodeType":"253","endLine":68,"endColumn":8,"suggestions":"254"},{"ruleId":"251","severity":1,"message":"255","line":22,"column":6,"nodeType":"253","endLine":22,"endColumn":8,"suggestions":"256"},{"ruleId":"245","severity":1,"message":"246","line":112,"column":9,"nodeType":"247","endLine":112,"endColumn":59},{"ruleId":"245","severity":1,"message":"246","line":133,"column":9,"nodeType":"247","endLine":133,"endColumn":58},{"ruleId":"245","severity":1,"message":"246","line":145,"column":9,"nodeType":"247","endLine":145,"endColumn":60},{"ruleId":"232","severity":1,"message":"257","line":1,"column":27,"nodeType":"234","messageId":"235","endLine":1,"endColumn":36},{"ruleId":"232","severity":1,"message":"244","line":9,"column":9,"nodeType":"234","messageId":"235","endLine":9,"endColumn":17},{"ruleId":"232","severity":1,"message":"258","line":12,"column":10,"nodeType":"234","messageId":"235","endLine":12,"endColumn":18},{"ruleId":"232","severity":1,"message":"259","line":12,"column":20,"nodeType":"234","messageId":"235","endLine":12,"endColumn":31},{"ruleId":"260","severity":1,"message":"261","line":143,"column":44,"nodeType":"262","messageId":"263","endLine":143,"endColumn":46},{"ruleId":"232","severity":1,"message":"242","line":1,"column":10,"nodeType":"234","messageId":"235","endLine":1,"endColumn":22},{"ruleId":"232","severity":1,"message":"264","line":3,"column":8,"nodeType":"234","messageId":"235","endLine":3,"endColumn":13},{"ruleId":"232","severity":1,"message":"265","line":5,"column":7,"nodeType":"234","messageId":"235","endLine":5,"endColumn":12},{"ruleId":"232","severity":1,"message":"266","line":6,"column":7,"nodeType":"234","messageId":"235","endLine":6,"endColumn":11},{"ruleId":"267","severity":1,"message":"268","line":54,"column":43,"nodeType":"269","messageId":"270","endLine":54,"endColumn":45},{"ruleId":"228","replacedBy":"271"},{"ruleId":"230","replacedBy":"272"},{"ruleId":"232","severity":1,"message":"273","line":2,"column":24,"nodeType":"234","messageId":"235","endLine":2,"endColumn":35},{"ruleId":"251","severity":1,"message":"274","line":12,"column":17,"nodeType":"275","endLine":12,"endColumn":22},{"ruleId":"260","severity":1,"message":"261","line":21,"column":15,"nodeType":"262","messageId":"263","endLine":21,"endColumn":17},{"ruleId":"232","severity":1,"message":"276","line":4,"column":8,"nodeType":"234","messageId":"235","endLine":4,"endColumn":20},{"ruleId":"232","severity":1,"message":"277","line":15,"column":7,"nodeType":"234","messageId":"235","endLine":15,"endColumn":14},{"ruleId":"228","replacedBy":"278"},{"ruleId":"230","replacedBy":"279"},{"ruleId":"232","severity":1,"message":"257","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"243","line":4,"column":48,"nodeType":"234","messageId":"235","endLine":4,"endColumn":55},{"ruleId":"232","severity":1,"message":"280","line":17,"column":10,"nodeType":"234","messageId":"235","endLine":17,"endColumn":15},{"ruleId":"232","severity":1,"message":"281","line":17,"column":17,"nodeType":"234","messageId":"235","endLine":17,"endColumn":25},{"ruleId":"232","severity":1,"message":"240","line":22,"column":9,"nodeType":"234","messageId":"235","endLine":22,"endColumn":18},{"ruleId":"232","severity":1,"message":"264","line":6,"column":8,"nodeType":"234","messageId":"235","endLine":6,"endColumn":13},{"ruleId":"232","severity":1,"message":"282","line":12,"column":23,"nodeType":"234","messageId":"235","endLine":12,"endColumn":34},{"ruleId":"232","severity":1,"message":"283","line":14,"column":9,"nodeType":"234","messageId":"235","endLine":14,"endColumn":20},{"ruleId":"260","severity":1,"message":"284","line":36,"column":27,"nodeType":"262","messageId":"263","endLine":36,"endColumn":29},{"ruleId":"260","severity":1,"message":"284","line":37,"column":28,"nodeType":"262","messageId":"263","endLine":37,"endColumn":30},{"ruleId":"260","severity":1,"message":"284","line":38,"column":27,"nodeType":"262","messageId":"263","endLine":38,"endColumn":29},{"ruleId":"260","severity":1,"message":"284","line":45,"column":32,"nodeType":"262","messageId":"263","endLine":45,"endColumn":34},{"ruleId":"260","severity":1,"message":"284","line":45,"column":57,"nodeType":"262","messageId":"263","endLine":45,"endColumn":59},{"ruleId":"260","severity":1,"message":"284","line":74,"column":19,"nodeType":"262","messageId":"263","endLine":74,"endColumn":21},{"ruleId":"260","severity":1,"message":"284","line":170,"column":18,"nodeType":"262","messageId":"263","endLine":170,"endColumn":20},{"ruleId":"260","severity":1,"message":"284","line":170,"column":38,"nodeType":"262","messageId":"263","endLine":170,"endColumn":40},{"ruleId":"260","severity":1,"message":"284","line":171,"column":18,"nodeType":"262","messageId":"263","endLine":171,"endColumn":20},{"ruleId":"260","severity":1,"message":"284","line":171,"column":38,"nodeType":"262","messageId":"263","endLine":171,"endColumn":40},{"ruleId":"260","severity":1,"message":"284","line":176,"column":19,"nodeType":"262","messageId":"263","endLine":176,"endColumn":21},{"ruleId":"260","severity":1,"message":"284","line":177,"column":21,"nodeType":"262","messageId":"263","endLine":177,"endColumn":23},{"ruleId":"260","severity":1,"message":"284","line":208,"column":18,"nodeType":"262","messageId":"263","endLine":208,"endColumn":20},{"ruleId":"260","severity":1,"message":"284","line":208,"column":38,"nodeType":"262","messageId":"263","endLine":208,"endColumn":40},{"ruleId":"260","severity":1,"message":"284","line":209,"column":18,"nodeType":"262","messageId":"263","endLine":209,"endColumn":20},{"ruleId":"260","severity":1,"message":"284","line":209,"column":38,"nodeType":"262","messageId":"263","endLine":209,"endColumn":40},{"ruleId":"260","severity":1,"message":"284","line":213,"column":19,"nodeType":"262","messageId":"263","endLine":213,"endColumn":21},{"ruleId":"232","severity":1,"message":"257","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"243","line":4,"column":48,"nodeType":"234","messageId":"235","endLine":4,"endColumn":55},{"ruleId":"232","severity":1,"message":"280","line":15,"column":10,"nodeType":"234","messageId":"235","endLine":15,"endColumn":15},{"ruleId":"232","severity":1,"message":"281","line":15,"column":17,"nodeType":"234","messageId":"235","endLine":15,"endColumn":25},{"ruleId":"232","severity":1,"message":"240","line":19,"column":9,"nodeType":"234","messageId":"235","endLine":19,"endColumn":18},{"ruleId":"228","replacedBy":"285"},{"ruleId":"230","replacedBy":"286"},{"ruleId":"232","severity":1,"message":"257","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"287","line":1,"column":28,"nodeType":"234","messageId":"235","endLine":1,"endColumn":36},{"ruleId":"251","severity":1,"message":"288","line":30,"column":6,"nodeType":"253","endLine":30,"endColumn":8,"suggestions":"289"},{"ruleId":"260","severity":1,"message":"284","line":32,"column":27,"nodeType":"262","messageId":"263","endLine":32,"endColumn":29},{"ruleId":"290","severity":1,"message":"291","line":71,"column":7,"nodeType":"234","messageId":"292","endLine":71,"endColumn":12},{"ruleId":"290","severity":1,"message":"293","line":72,"column":7,"nodeType":"234","messageId":"292","endLine":72,"endColumn":13},{"ruleId":"232","severity":1,"message":"294","line":83,"column":13,"nodeType":"234","messageId":"235","endLine":83,"endColumn":19},{"ruleId":"232","severity":1,"message":"295","line":83,"column":21,"nodeType":"234","messageId":"235","endLine":83,"endColumn":30},{"ruleId":"232","severity":1,"message":"296","line":83,"column":32,"nodeType":"234","messageId":"235","endLine":83,"endColumn":37},{"ruleId":"232","severity":1,"message":"297","line":83,"column":39,"nodeType":"234","messageId":"235","endLine":83,"endColumn":45},{"ruleId":"232","severity":1,"message":"298","line":83,"column":47,"nodeType":"234","messageId":"235","endLine":83,"endColumn":63},{"ruleId":"260","severity":1,"message":"284","line":113,"column":19,"nodeType":"262","messageId":"263","endLine":113,"endColumn":21},{"ruleId":"232","severity":1,"message":"257","line":1,"column":27,"nodeType":"234","messageId":"235","endLine":1,"endColumn":36},{"ruleId":"232","severity":1,"message":"299","line":3,"column":25,"nodeType":"234","messageId":"235","endLine":3,"endColumn":33},{"ruleId":"232","severity":1,"message":"243","line":3,"column":35,"nodeType":"234","messageId":"235","endLine":3,"endColumn":42},{"ruleId":"232","severity":1,"message":"264","line":4,"column":8,"nodeType":"234","messageId":"235","endLine":4,"endColumn":13},{"ruleId":"232","severity":1,"message":"244","line":9,"column":9,"nodeType":"234","messageId":"235","endLine":9,"endColumn":17},{"ruleId":"232","severity":1,"message":"258","line":12,"column":10,"nodeType":"234","messageId":"235","endLine":12,"endColumn":18},{"ruleId":"232","severity":1,"message":"259","line":12,"column":20,"nodeType":"234","messageId":"235","endLine":12,"endColumn":31},{"ruleId":"232","severity":1,"message":"300","line":13,"column":10,"nodeType":"234","messageId":"235","endLine":13,"endColumn":18},{"ruleId":"232","severity":1,"message":"301","line":13,"column":20,"nodeType":"234","messageId":"235","endLine":13,"endColumn":31},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"no-unused-vars","'Reducer' is defined but never used.","Identifier","unusedVar",["302"],["303"],"'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'showModal' is assigned a value but never used.","'Button' is defined but never used.","'BreakActions' is defined but never used.","'message' is defined but never used.","'TextArea' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Provider' is defined but never used.","'remote' is assigned a value but never used.","'HomeScreen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["304"],"React Hook useEffect has a missing dependency: 'awcheck'. Either include it or remove the dependency array.",["305"],"'useEffect' is defined but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'axios' is defined but never used.","'isDev' is assigned a value but never used.","'path' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["302"],["303"],"'PastActions' is defined but never used.","Assignments to the 'mounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'BreakManager' is defined but never used.","'history' is assigned a value but never used.",["302"],["303"],"'sites' is assigned a value but never used.","'setSites' is assigned a value but never used.","'useSelector' is defined but never used.","'ipcRenderer' is assigned a value but never used.","Expected '===' and instead saw '=='.",["302"],["303"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",["306"],"no-redeclare","'words' is already defined.","redeclared","'colors' is already defined.","'errors' is assigned a value but never used.","'successes' is assigned a value but never used.","'begin' is assigned a value but never used.","'finish' is assigned a value but never used.","'timeLimitReached' is assigned a value but never used.","'Checkbox' is defined but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},"Update the dependencies array to be: [dispatch, history]",{"range":"313","text":"314"},"Update the dependencies array to be: [awcheck]",{"range":"315","text":"316"},"Update the dependencies array to be: [count]",{"range":"317","text":"318"},[2998,3000],"[dispatch, history]",[796,798],"[awcheck]",[752,754],"[count]"]